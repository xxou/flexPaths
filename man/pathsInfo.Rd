% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pathsInfo.R
\name{pathsInfo}
\alias{pathsInfo}
\title{Causal Path-Specific Analysis Setup}
\usage{
pathsInfo(
  A,
  Y,
  cov_x,
  data,
  M.list = list(),
  estimation = "EIF",
  model.propensity = NULL,
  model.outcome = NULL,
  model.iter = NULL
)
}
\arguments{
\item{A}{A character string or a vector of character strings representing the name(s) of one or more treatments.
The treatments should be binary variables taking values of either 0 or 1.}

\item{Y}{A character string indicating the name of the outcome variable.}

\item{cov_x}{A vector of character strings indicating the name(s) of covariates.}

\item{data}{A data frame containing all variables.}

\item{M.list}{A list of \eqn{K} mediators, where \eqn{K} is the number of mediators. Each mediator can be multivariate.
Use the form \code{list(M1 = c("mediator1_1", "mediator1_2"), M2 = c("mediator2"), ... )}, with \code{M_i} to index the order of mediators.
Alternatively, you can list them in order using \code{list(c("mediator1_1", "mediator1_2"), c("mediator2"), ... )}.}

\item{estimation}{A character string indicating the type of estimation to be used. Choose from "EIF" (Efficient Influence Function),
"IPW" (Inverse Probability Weighting), or "G" (G-computation).}

\item{model.propensity}{If you select "G" for estimation, this parameter is not needed. Otherwise, provide a formula or list of formulas for modeling the propensity score
(for \eqn{K} mediators, you need \eqn{K+1} models for \eqn{P(A|X)}, \eqn{P(A|M_1, X)}, ..., \eqn{P(A|M_K, X)}).
\itemize{
\item Provide a single formula or a list containing one formula. This formula will be applied to all propensity models.
\item Alternatively, provide a list of formulas with names, e.g., \code{list(cov_x = ~glm(family = binomial()), M1 = ~bart(), ..., MK = ~glm(family = binomial()))}. If no names are provided, the formulas will correspond to \eqn{P(A|X)}, \eqn{P(A|M_1, X)}, ..., \eqn{P(A|M_1, M_2, ..., M_K, X)} in order.
\item Each formula can come from functions like \code{glm}, \code{bart}, or \code{Superlearner}. The arguments are the same as in their original functions, except that you do not need to specify the variables already provided in \code{data}. If you wish to use models other than \code{glm}, \code{bart}, or \code{Superlearner}, you can use \code{fl_model_template} to create a custom model function.
}}

\item{model.outcome}{If you select "IPW" for estimation, this parameter is not needed. Otherwise, provide the model for outcome regression
(e.g., \eqn{E(Y|A,X)}, \eqn{E(Y|M_1, A,X)}, ..., \eqn{E(Y|M_1, M_2, ..., M_K, A, X)}). This parameter follows the same logic as \code{model.propensity}.}

\item{model.iter}{If you select "IPW" for estimation, this parameter is not needed. This parameter is used for modeling the iterative outcome regression
(e.g., \eqn{E(Y|M_1, X)}, ..., \eqn{E(Y|M_1, M_2, ..., M_K, X)}) with predictors \eqn{(A,X)}, \eqn{(M_1, A,X)}, ..., \eqn{(\overline{M}_{k-1}, A,X)}, and for higher layers of iterative modeling.
\itemize{
\item If you do not provide input, the iterative model will use the \code{model.outcome} fitting corresponding predictors, with the Gaussian family applied to all.
\item You can input a single formula or a list containing one formula, which will be applied to all iterative regression models.
\item Alternatively, input \eqn{K} models for \eqn{(A,X)}, \eqn{(M_1, A,X)}, ..., \eqn{(\overline{M}_{k-1}, A,X)}, which will be used as the predictors for iterative regression models.
}}
}
\value{
An object of class \code{pathsInfo}, which is a list containing the following elements:
\describe{
\item{\code{data}}{The original data frame used for the analysis.}
\item{\code{A}}{A vector or list representing the treatment(s) in the causal analysis.}
\item{\code{Y}}{A vector representing the outcome variable.}
\item{\code{cov_x}}{A vector of covariates to be adjusted for in the models.}
\item{\code{M.list}}{A list of mediators in the causal pathway, reordered if necessary.}
\item{\code{estimation}}{A character string indicating the type of estimation to be used, such as "EIF" (Efficient Influence Function), "IPW" (Inverse Probability Weighting), or "G" (G-computation).}
\item{\code{Pmodel.lists}}{A list of formulas for the propensity score models corresponding to each mediator in the causal pathway.}
\item{\code{Omodel.lists}}{A list of formulas for the outcome models corresponding to each mediator in the causal pathway.}
\item{\code{Imodel.lists}}{A list of formulas for potential iterative models used in estimation procedures.}
}
}
\description{
This function sets up the necessary components for conducting a causal path-specific analysis.
It prepares the data, estimation methods, and models required for further effect calculations.
}
\examples{
# ***************************************
#    single treatment  example
# ***************************************
data("singTreat")
# EIF estimation
EIF_fit <- pathsInfo(data = singTreat, A = "treat", Y = "outcome1", cov_x = c("X1", "X2"),
                     M.list = list(M1 = "med1", M2 = c('med2_1', 'med2_2'), M3 = 'med3'),
                     estimation = "EIF",
                     model.outcome = ~SuperLearner(SL.library = c('randomForest','xgboost'),family = gaussian()),
                     model.propensity = ~ bart(verbose = FALSE, ndpost = 200)
)



EIF_fit <- pathsInfo(data = singTreat, A = "treat", Y = "outcome1", cov_x = c("X1", "X2"),
                     M.list = list(M1 = "med1", M2 = c('med2_1', 'med2_2'), M3 = 'med3'),
                     estimation = "EIF",
                     model.outcome = ~ SuperLearner(SL.library = c('randomForest','xgboost'),family = gaussian()),
                     model.propensity = list(cov_x = ~ bart(verbose = FALSE, ndpost = 200),
                                             M1 = ~ glm(family = binomial()),
                                             M2 = ~ SuperLearner(SL.library = c('randomForest','xgboost'),family = binomial()),
                                             M3 = ~ glm(family = binomial()))
)


EIF_fit <- pathsInfo(data = singTreat, A = "treat", Y = "outcome1", cov_x = c("X1", "X2"),
                     M.list = list(M1 = "med1", M2 = c('med2_1', 'med2_2'), M3 = 'med3'),
                     estimation = "EIF",
                     model.outcome = list(cov_x = ~ glm(formula = outcome1 ~X1*X2 ,family = gaussian()),
                                          M1 = ~ glm(formula = outcome1 ~med1+X1*X2, family = gaussian()),
                                          M2 = ~ glm(formula = outcome1 ~med1+med2_1*med2_1+X1*X2, family = gaussian()),
                                          M3 = ~ glm(formula = outcome1 ~med1+med2_1*med2_1+med3+X1*X2, family = gaussian())),
                     model.propensity = list( ~ bart(verbose = FALSE, ndpost = 200))
)

# ***************************************
#   multiple treatments fit example
# ***************************************
data("multiTreat")
mfit<- pathsFit(data=multiTreat,
                Y = "Y",
                A = c("t1","t2","t3"),
                cov_x = "X",
                M.list = list(
                  M1 = 'm1',
                  M2 = 'm2',
                  M3 = 'm3',
                  M4 = 'm4',
                  M5 = 'm5',
                  M6 = 'm6'
                ),
                estimation = "EIF",
                model.propensity =list( ~  glm(family = binomial())),
                model.outcome = list( ~SuperLearner(SL.library = "SL.mean",family = gaussian())),
                model.iter  = list(~glm(family = gaussian()))
)
}
