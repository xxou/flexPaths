% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/flexPotential.R
\name{flexPotential}
\alias{flexPotential}
\title{Causal Path-Specific Potential Outcome Calculation for Single Treatment}
\usage{
flexPotential(pathsFit, active)
}
\arguments{
\item{pathsFit}{An object of class \code{pathsFit}, which is the output from the \code{pathsFit} function, containing the necessary fitted models and data.}

\item{active}{A vector specifying the active values for each mediator (M1 to Mk) and the direct value setting for the outcome (Y) in order.
The last value in the vector corresponds to the treatment value for Y. The length of this vector should be equal to the number of mediators plus one (for the direct effect on Y).}

\item{data}{A data frame containing all the variables required for the analysis.}
}
\value{
An object of class \code{flexPotential}, which includes the following components:
\describe{
\item{\code{call}}{The matched call to the \code{flexPotential} function.}
\item{\code{pathsFit}}{The original \code{pathsFit} object used for the analysis.}
\item{\code{active}}{A vector representing the active values used for each mediator and the direct outcome.}
\item{\code{results}}{A data frame containing the calculated potential outcome (value) and its standard error (SE).}
\item{\code{potential_data}}{A vector containing the calculated potential outcomes for each observation in the dataset.}
}
}
\description{
This function calculates causal path-specific potential outcomes for a single binary treatment.
Users can specify different levels of the treatment for each mediator (M1, M2, ..., Mk) and directly define the outcome (Y) to represent the potential outcome for a specific path or a combination of paths.
The function supports various estimation methods, including EIF (Efficient Influence Function), IPW (Inverse Probability Weighting), and G-computation.
}
\examples{
# Example usage
data("singTreat")

fit <- pathsFit(data = singTreat, A = "treat", Y = "outcome1", cov_x = c("X1", "X2"),
                M.list = list(M1 = "med1", M2 = c('med2_1', 'med2_2'), M3 = 'med3'),
                estimation = "EIF",
                model.outcome = list(~ glm(family = gaussian())),
                model.propensity = ~ bart(verbose = FALSE, ndpost = 200))

potential_outcome <- flexPotential(
  pathsFit = fit,
  active = c(1, 0, 1, 1)  # Setting active values for M1, M2, M3, and Y
)

}
