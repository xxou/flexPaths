function(mediator, a_predictor, a_out){
model_fun <- match.fun(pro.fit_names)
modelfit <- map2(a_predictor, a_out,
~{model_fun(data, X = c(mediator, .x) ,Y = .y, fl_call = pro.calls)})
print(mediator); print(a_predictor); print(a_out);
modelfit[[1]]$model
cat("Next------------------\n")
return(modelfit)
})
(modelfit[[1]]$model)
pro.modelfits<-pmap(list(cum_mediators, cum_a.list, a.list),
function(mediator, a_predictor, a_out){
model_fun <- match.fun(pro.fit_names)
modelfit <- map2(a_predictor, a_out,
~{model_fun(data, X = c(mediator, .x) ,Y = .y, fl_call = pro.calls)})
print(mediator); print(a_predictor); print(a_out);
print(modelfit[[1]]$model)
cat("Next------------------\n")
return(modelfit)
})
pro.modelfits<-pmap(list(cum_mediators, cum_a.list, a.list),
function(mediator, a_predictor, a_out){
model_fun <- match.fun(pro.fit_names)
modelfit <- map2(a_predictor, a_out,
~{model_fun(data, X = c(mediator, .x) ,Y = .y, fl_call = pro.calls)})
print(mediator); print(a_predictor); print(a_out);
print(modelfit[[1]]$model)
cat("\nNext------------------\n")
return(modelfit)
})
pro.modelfits<-pmap(list(cum_mediators, cum_a.list, a.list),
function(mediator, a_predictor, a_out){
model_fun <- match.fun(pro.fit_names)
modelfit <- map2(a_predictor, a_out,
~{model_fun(data, X = c(mediator, .x) ,Y = .y, fl_call = pro.calls)})
print(mediator); print(a_predictor); print(a_out);
print(modelfit)
cat("\nNext------------------\n")
return(modelfit)
})
modelfit
modelfit[[2]]
try{print(modelfit[[2]]$model);}
map(modelfit, "model")
pro.modelfits<-pmap(list(cum_mediators, cum_a.list, a.list),
function(mediator, a_predictor, a_out){
model_fun <- match.fun(pro.fit_names)
modelfit <- map2(a_predictor, a_out,
~{model_fun(data, X = c(mediator, .x) ,Y = .y, fl_call = pro.calls)})
print(mediator); print(a_predictor); print(a_out);
print(map(modelfit, "model"))
cat("\nNext------------------\n")
return(modelfit)
})
pro.modelfits<-pmap(list(cum_mediators, cum_a.list, a.list),
function(mediator, a_predictor, a_out){
model_fun <- match.fun(pro.fit_names)
modelfit <- map2(a_predictor, a_out,
~{model_fun(data, X = c(mediator, .x) ,Y = .y, fl_call = pro.calls)})
print(mediator); print(a_predictor); print(a_out);
print(map(modelfit, "model"))
cat("\nNext----------------------------------------------\n")
return(modelfit)
})
print(mediator, ";")
pro.modelfits<-pmap(list(cum_mediators, cum_a.list, a.list),
function(mediator, a_predictor, a_out){
model_fun <- match.fun(pro.fit_names)
modelfit <- map2(a_predictor, a_out,
~{model_fun(data, X = c(mediator, .x), Y = .y, fl_call = pro.calls)})
print(mediator); print(";");  print(a_predictor); print(";"); print(a_out); print(";")
print(map(modelfit, "model"))
cat("\nNext----------------------------------------------\n")
return(modelfit)
})
cat(";")
cat(" ")
pro.modelfits<-pmap(list(cum_mediators, cum_a.list, a.list),
function(mediator, a_predictor, a_out){
model_fun <- match.fun(pro.fit_names)
modelfit <- map2(a_predictor, a_out,
~{model_fun(data, X = c(mediator, .x), Y = .y, fl_call = pro.calls)})
print(mediator); cat("____");
print(a_predictor); cat("____");
print(a_out); cat("____");
print(map(modelfit, "model"))
cat("\nNext----------------------------------------------\n")
return(modelfit)
})
pro.modelfits<-pmap(list(cum_mediators, cum_a.list, a.list),
function(mediator, a_predictor, a_out){
model_fun <- match.fun(pro.fit_names)
modelfit <- map2(a_predictor, a_out,
~{model_fun(data, X = c(mediator, .x), Y = .y, fl_call = pro.calls)})
print(mediator); cat("____\n");
print(a_predictor); cat("____\n");
print(a_out); cat("____\n");
print(map(modelfit, "model"))
cat("\nNext----------------------------------------------\n")
return(modelfit)
})
# product term in the denominators of Indicator
I.model.index<- map_int(unique(flatten(cum_a.list) ), ~ which(map_lgl(flatten(cum_a.list), identical, .x))[1])
I.model.index
model.I <- flatten(pro.modelfits)[I.model.index]
model.I
print(map(model.I, "model"))
flatten(cum_a.list)
cum_a.list
unique(flatten(cum_a.list) )
I.model.index
pro.modelfits
print(map(pro.modelfits, "model"))
pro.modelfits
flatten(pro.modelfits)
model.I
print(map(model.I, "model"))
model.I.list
model.I.list <-map(seq_len(ncol(active_s)), ~ model.I[which(!is.na(active_s[, .x]))])
model.I.list
print(map(model.I.list, "model"))
model.I.list
ncol(active_s)
seq_len(ncol(active_s))
active_s
print(map(model.I.list, "model"))
!is.na(active_s[, 1])
model.I
print(map(model.I.list, "model"))
print(map(model.I, "model"))
model.I.list
model.I.list[[1]]
print(map(model.I.list[[1]], "model"))
print(map(model.I.list[[2]], "model"))
print(map(model.I.list[[3]], "model"))
print(map(model.I.list[[4]], "model"))
print(map(model.I.list[[5]], "model"))
active_s
K
phi.all <- matrix(NA, nc = K+1, nr = N) # calculation from muK to mu1
phi.all[,1] <- mu.all[,1]
i = K
active_i <- active_s.list[[i]]
active_i
## indicator I(t1 = , t2 =, ...)
Indicator_expr <- paste(map2(a.list[[i]], active_i, ~ paste0(.x, "==", .y)),
collapse = " & ")
Indicator_expr
I = eval(parse(text = Indicator_expr),envir = data)
model_list = model.I.list[[i]]
a_vars = a.list[[i]]
a_values = active_s.list[[i]]
model_list
model.I.list[[i]]
model.I.list[[i]]$model
print(map(model.I.list[[5]], "model"))
model_list = model.I.list[[i]]
print(map(model_list, "model"))
a_vars
a_values
print(map(model_list, "model"))
1:length(a_vars)
model_list = model_list[1:length(a_vars)]
a_values = a_values[1:length(a_vars)]
model_list
Xa_vars = cumulate_vars(a_vars, first_null = T)
Xa_vars
Xa_values = cumulate_vars(a_values, first_null = T)
Xa_values
Xa_values
a_values
Ai_data = model$dataX
model_list
model = model_list[[1]]
Xa_var = Xa_vars[[1]]
Xa_values = Xa_values[[1]]
a_values = a_values[[1]]
model$model
Xa_var
!is.null(Xa_var)
Ai_data = model$dataX
Y_value
a_values = a_values[[1]] = a_values[[1]]
Y_value = 0
a_values = active_s.list[[i]]
model = model_list[[2]]
Xa_vars = Xa_vars[[2]]
Xa_values = Xa_values[[2]]
a_values = a_values[[2]]
Y_value  = a_values
model_list = model.I.list[[i]]
a_vars = a.list[[i]]
a_values = active_s.list[[i]]
model = model_list[[2]]
Xa_var = Xa_vars[[2]]
Xa_vars
model_list = model_list[1:length(a_vars)]
a_values = a_values[1:length(a_vars)]
Xa_vars = cumulate_vars(a_vars, first_null = T)
Xa_values = cumulate_vars(a_values, first_null = T)
Xa_vars
Xa_values
Xa_var  = Xa_vars[[2]]
Xa_value = Xa_values[[2]]
Y_value = a_values[[2]]
model
model$model
Ai_data = model$dataX
!is.null(Xa_var)
Xa_var
Xa_value
Y_value
Ai_data[,Xa_var] = suppressMessages({map_dfc(Xa_value, ~rep(.x, dim(Ai_data)[1]))})
print( head(Ai_data)); cat(Xa_var,',',Xa_value,",",Y_value,'\n')
cat('Xa_var:', Xa_var,',',"Xa_value:", Xa_value,",", "Y_value:",Y_value,'\n')
cat(model$model)
print(model$model)
# model_list<- pro.modelfits[[4]] the model to be predicted
# a_vars <- a.list[[3]] its value
# a_values <- active_s.list[[3]]
#' @import stats purrr
#'
prod_assign_modellist <- function(model_list,a_vars, a_values){
model_list = model_list[1:length(a_vars)]
a_values = a_values[1:length(a_vars)]
Xa_vars = cumulate_vars(a_vars, first_null = T)
Xa_values = cumulate_vars(a_values, first_null = T)
# predict the model list
pred <- pmap(list(model_list, Xa_vars, Xa_values, a_values),
function(model, Xa_var, Xa_value, Y_value){
Ai_data = model$dataX
# print( head(Ai_data))
if(!is.null(Xa_var)){
Ai_data[ ,Xa_var] = suppressMessages({map_dfc(Xa_value, ~rep(.x, dim(Ai_data)[1]))})
}
print( head(Ai_data));
cat('Xa_var:', Xa_var,',',"Xa_value:", Xa_value,",", "Y_value:",Y_value,'\n')
print(model$model)
predY1 <-predict(model, newdata = Ai_data )
pred <- predY1*Y_value + (1-predY1)*(1-Y_value)
})
prod.modelpred <- reduce(pred, `*`)
return(prod.modelpred)
}
## product.I:
product.I = prod_assign_modellist(model_list = model.I.list[[i]],
a_vars = a.list[[i]],
a_values = active_s.list[[i]] )
head(data)
I
parse(text = Indicator_expr)
## product.I:
product.I = prod_assign_modellist(model_list = model.I.list[[i]],
a_vars = a.list[[i]],
a_values = active_s.list[[i]] )
# model_list<- pro.modelfits[[4]] the model to be predicted
# a_vars <- a.list[[3]] its value
# a_values <- active_s.list[[3]]
#' @import stats purrr
#'
prod_assign_modellist <- function(model_list,a_vars, a_values){
model_list = model_list[1:length(a_vars)]
a_values = a_values[1:length(a_vars)]
Xa_vars = cumulate_vars(a_vars, first_null = T)
Xa_values = cumulate_vars(a_values, first_null = T)
# predict the model list
pred <- pmap(list(model_list, Xa_vars, Xa_values, a_values),
function(model, Xa_var, Xa_value, Y_value){
Ai_data = model$dataX
# print( head(Ai_data))
if(!is.null(Xa_var)){
Ai_data[ ,Xa_var] = suppressMessages({map_dfc(Xa_value, ~rep(.x, dim(Ai_data)[1]))})
}
print( head(Ai_data));
cat('Xa_var:', Xa_var,',',"Xa_value:", Xa_value,",", "Y_value:",Y_value,'\n')
print(model$model)
cat("-----------------------------\n")
predY1 <-predict(model, newdata = Ai_data )
pred <- predY1*Y_value + (1-predY1)*(1-Y_value)
})
prod.modelpred <- reduce(pred, `*`)
return(prod.modelpred)
}
## product.I:
product.I = prod_assign_modellist(model_list = model.I.list[[i]],
a_vars = a.list[[i]],
a_values = active_s.list[[i]] )
active_s
## product.I:
cat("product.I")
## Bayes density ratio
cat("Bayes density ratio \n")
# **********************************
# 4. potential outcome data --------
# **********************************
if(estimation == "EIF"){
phi.all <- matrix(NA, nc = K+1, nr = N) # calculation from muK to mu1
phi.all[,1] <- mu.all[,1]
for (i in K:1) {
active_i <- active_s.list[[i]]
## indicator I(t1 = , t2 =, ...)
Indicator_expr <- paste(map2(a.list[[i]], active_i, ~ paste0(.x, "==", .y)),
collapse = " & ")
I = eval(parse(text = Indicator_expr), envir = data)
## product.I:
cat("product.I \n")
product.I = prod_assign_modellist(model_list = model.I.list[[i]],
a_vars = a.list[[i]],
a_values = active_s.list[[i]] )
## Bayes density ratio
cat("Bayes density ratio \n")
product.Bayes <- 1 # Initialize the product
# Iterate through previous indices j < i
for (j in seq_len(i - 1)) {
if (!all(active_s[,i] == active_s[,j], na.rm = T) ) {
product.Bayes <- product.Bayes *
(  prod_assign_modellist(pro.modelfits[[j+1]], a.list[[j]], active_s.list[[j]]) /  # use the value of itself to predict
prod_assign_modellist(pro.modelfits[[j+1]], a.list[[j]], active_s.list[[i]])    # use the value of i to predict
)*
(prod_assign_modellist(pro.modelfits[[j]],a.list[[j]],active_s.list[[i]])/
prod_assign_modellist(pro.modelfits[[j]],a.list[[j]],active_s.list[[j]]))
}
}
# sub EIF function for each row
phi.all[ ,i+1] = I/product.I * product.Bayes * ( mu.all[ , i+1] - mu.all[ , i] )
}
potential_data = rowSums(phi.all)
}
## Bayes density ratio
cat(i, "Bayes density ratio \n")
cat("-------------------------------")
for (i in K:1) {
active_i <- active_s.list[[i]]
## indicator I(t1 = , t2 =, ...)
Indicator_expr <- paste(map2(a.list[[i]], active_i, ~ paste0(.x, "==", .y)),
collapse = " & ")
I = eval(parse(text = Indicator_expr), envir = data)
## product.I:
cat(i, ": product.I \n")
product.I = prod_assign_modellist(model_list = model.I.list[[i]],
a_vars = a.list[[i]],
a_values = active_s.list[[i]] )
## Bayes density ratio
cat(i, ": Bayes density ratio \n")
product.Bayes <- 1 # Initialize the product
# Iterate through previous indices j < i
for (j in seq_len(i - 1)) {
if (!all(active_s[,i] == active_s[,j], na.rm = T) ) {
product.Bayes <- product.Bayes *
(  prod_assign_modellist(pro.modelfits[[j+1]], a.list[[j]], active_s.list[[j]]) /  # use the value of itself to predict
prod_assign_modellist(pro.modelfits[[j+1]], a.list[[j]], active_s.list[[i]])    # use the value of i to predict
)*
(prod_assign_modellist(pro.modelfits[[j]],a.list[[j]],active_s.list[[i]])/
prod_assign_modellist(pro.modelfits[[j]],a.list[[j]],active_s.list[[j]]))
}
}
# sub EIF function for each row
phi.all[ ,i+1] = I/product.I * product.Bayes * ( mu.all[ , i+1] - mu.all[ , i] )
cat("-------------------------------")
}
for (i in K:1) {
active_i <- active_s.list[[i]]
## indicator I(t1 = , t2 =, ...)
Indicator_expr <- paste(map2(a.list[[i]], active_i, ~ paste0(.x, "==", .y)),
collapse = " & ")
I = eval(parse(text = Indicator_expr), envir = data)
## product.I:
# cat(i, ": product.I \n")
product.I = prod_assign_modellist(model_list = model.I.list[[i]],
a_vars = a.list[[i]],
a_values = active_s.list[[i]] )
## Bayes density ratio
# cat(i, ": Bayes density ratio \n")
product.Bayes <- 1 # Initialize the product
# Iterate through previous indices j < i
for (j in seq_len(i - 1)) {
if (!all(active_s[,i] == active_s[,j], na.rm = T) ) {
product.Bayes <- product.Bayes *
(  prod_assign_modellist(pro.modelfits[[j+1]], a.list[[j]], active_s.list[[j]]) /  # use the value of itself to predict
prod_assign_modellist(pro.modelfits[[j+1]], a.list[[j]], active_s.list[[i]])    # use the value of i_th to predict
)*
(prod_assign_modellist(pro.modelfits[[j]],a.list[[j]],active_s.list[[i]])/
prod_assign_modellist(pro.modelfits[[j]],a.list[[j]],active_s.list[[j]]))
}
}
# sub EIF function for each row
phi.all[ ,i+1] = I/product.I * product.Bayes * ( mu.all[ , i+1] - mu.all[ , i] )
# cat("-------------------------------")
}
# model_list<- pro.modelfits[[4]] the model to be predicted
# a_vars <- a.list[[3]] its value
# a_values <- active_s.list[[3]]
#' @import stats purrr
#'
prod_assign_modellist <- function(model_list,a_vars, a_values){
model_list = model_list[1:length(a_vars)]
a_values = a_values[1:length(a_vars)]
Xa_vars = cumulate_vars(a_vars, first_null = T)
Xa_values = cumulate_vars(a_values, first_null = T)
# predict the model list
pred <- pmap(list(model_list, Xa_vars, Xa_values, a_values),
function(model, Xa_var, Xa_value, Y_value){
Ai_data = model$dataX
# print( head(Ai_data))
if(!is.null(Xa_var)){
Ai_data[ ,Xa_var] = suppressMessages({map_dfc(Xa_value, ~rep(.x, dim(Ai_data)[1]))})
}
# print( head(Ai_data));
# cat('Xa_var:', Xa_var,',',"Xa_value:", Xa_value,",", "Y_value:",Y_value,'\n')
# print(model$model)
# cat("-----------------------------\n")
predY1 <-predict(model, newdata = Ai_data )
pred <- predY1*Y_value + (1-predY1)*(1-Y_value)
})
prod.modelpred <- reduce(pred, `*`)
return(prod.modelpred)
}
if(estimation == "IPW"){
active_K <- active_s.list[[K]]
## indicator I(t1 = , t2 =, ...)
Indicator_expr <- paste(map2(a.list[[K]], active_K, ~ paste0(.x, "==", .y)),
collapse = " & ")
I = eval(parse(text = Indicator_expr),envir = data)
## product.I:
product.I = prod_assign_modellist(model_list = model.I.list[[K]],
a_vars = a.list[[K]],
a_values = active_s.list[[K]] )
## Bayes density ratio
product.Bayes <- 1 # Initialize the product
# Iterate through previous indices j < i
for (j in seq_len(K - 1)) {
if (!all(active_s[,K] == active_s[,j],na.rm = T) ) {
product.Bayes <- product.Bayes *
(  prod_assign_modellist(pro.modelfits[[j+1]],a.list[[j]],active_s.list[[j]]) /  # use the value of itself to predict
prod_assign_modellist(pro.modelfits[[j+1]],a.list[[j]],active_s.list[[K]])    # use the value of i to predict
)*
(prod_assign_modellist(pro.modelfits[[j]],a.list[[j]],active_s.list[[K]])/
prod_assign_modellist(pro.modelfits[[j]],a.list[[j]],active_s.list[[j]]))
}
}
# sub EIF function for each row
potential_data = I/product.I*product.Bayes*data[,Y]
}
potential_data
# **********************************
# 4. potential outcome data --------
# **********************************
if(estimation == "EIF"){
phi.all <- matrix(NA, nc = K+1, nr = N) # calculation from muK to mu1
phi.all[ ,1] <- mu.all[ ,1]
for (i in K:1) {
active_i <- active_s.list[[i]]
## indicator I(t1 = , t2 =, ...)
Indicator_expr <- paste(map2(a.list[[i]], active_i, ~ paste0(.x, "==", .y)),
collapse = " & ")
I = eval(parse(text = Indicator_expr), envir = data)
## product.I:
# cat(i, ": product.I \n")
product.I = prod_assign_modellist(model_list = model.I.list[[i]],
a_vars = a.list[[i]],
a_values = active_s.list[[i]] )
## Bayes density ratio
# cat(i, ": Bayes density ratio \n")
product.Bayes <- 1 # Initialize the product
# Iterate through previous indices j < i
for (j in seq_len(i - 1)) {
if (!all(active_s[,i] == active_s[,j], na.rm = T) ) {
product.Bayes <- product.Bayes *
(  prod_assign_modellist(pro.modelfits[[j+1]], a.list[[j]], active_s.list[[j]]) /  # use the value of itself to predict
prod_assign_modellist(pro.modelfits[[j+1]], a.list[[j]], active_s.list[[i]])    # use the value of i_th to predict
)*
(prod_assign_modellist(pro.modelfits[[j]],a.list[[j]],active_s.list[[i]])/
prod_assign_modellist(pro.modelfits[[j]],a.list[[j]],active_s.list[[j]]))
}
}
# sub EIF function for each row
phi.all[ ,i+1] = I/product.I * product.Bayes * ( mu.all[ , i+1] - mu.all[ , i] )
# cat("-------------------------------")
}
potential_data = rowSums(phi.all)
}
potential_data
phi.all
active_K <- active_s.list[[K]]
## indicator I(t1 = , t2 =, ...)
Indicator_expr <- paste(map2(a.list[[K]], active_K, ~ paste0(.x, "==", .y)),
collapse = " & ")
I = eval(parse(text = Indicator_expr),envir = data)
## product.I:
product.I = prod_assign_modellist(model_list = model.I.list[[K]],
a_vars = a.list[[K]],
a_values = active_s.list[[K]] )
## Bayes density ratio
product.Bayes <- 1 # Initialize the product
# Iterate through previous indices j < i
for (j in seq_len(K - 1)) {
if (!all(active_s[,K] == active_s[,j],na.rm = T) ) {
product.Bayes <- product.Bayes *
(  prod_assign_modellist(pro.modelfits[[j+1]],a.list[[j]],active_s.list[[j]]) /  # use the value of itself to predict
prod_assign_modellist(pro.modelfits[[j+1]],a.list[[j]],active_s.list[[K]])    # use the value of i to predict
)*
(prod_assign_modellist(pro.modelfits[[j]],a.list[[j]],active_s.list[[K]])/
prod_assign_modellist(pro.modelfits[[j]],a.list[[j]],active_s.list[[j]]))
}
}
# sub EIF function for each row
potential_data = I/product.I*product.Bayes*data[,Y]
potential_data
active_m
active_s
devtools::document()
devtools::build()
