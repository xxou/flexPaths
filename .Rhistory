out.details<- map(Omodel.lists,extract_model_details)
out.fit_names <- map(out.details, ~ paste0("fl_", .x$fit_name))
out.calls <-  map(out.details, "model_call")
iter.details<- map(Imodel.lists,extract_model_details)
iter.fit_names <- map(iter.details, ~ paste0("fl_", .x$fit_name))
iter.calls <- map(iter.details, "model_call")
if(Imodel.source == "default"){iter.calls <-map(iter.calls, ~ replace_family(.x))}
fit_names <- c(rep(iter.fit_names,K-1), out.fit_names)
mu.calls <- c(rep(iter.calls,K-1), out.calls)
# Innermost function
mu.all <- matrix(NA,nc=K+1,nr=N) # EE..E()|A,X)|..), ...., E(Y|mk,A,x), Y
mu.all[,K+1] <- data[,Y]
# iterative outcome model
for(i in K:1){
data$mu <- mu.all[,i+1]
Ai_data = data
Ai_data[,a.list[[i]]] = suppressMessages({map_dfc(active_s.list[[i]], ~rep(.x, N))})
model_fun <- match.fun(fit_names[[i]])
modelfit <- model_fun(data, X = c(a.list[[i]],cum_mediators[[i]]),Y = "mu", fl_call=mu.calls[[i]])
# print(modelfit)
mu.all[,i] <- predict(modelfit, Ai_data[,c(a.list[[i]],cum_mediators[[i]])])
}
}
# **********************************
#    3. propensity model ----------
# **********************************
if(estimation !="G"){
pro.details<- extract_model_details(Pmodel.lists[[1]])
pro.fit_names <-paste0("fl_", pro.details$fit_name)
pro.calls <- pro.details$model_call
# Nested list: propensity for p(t1|...);p(t2|t1, ...);p(t3|...)
pro.modelfits<-pmap(list(cum_mediators, cum_a.list, a.list),
function(mediator, a_predictor, a_out){
model_fun <- match.fun(pro.fit_names)
modelfit <- map2(a_predictor,a_out,
~{model_fun(data, X = c(mediator,.x) ,Y = .y, fl_call =pro.calls)})
return(modelfit)
})
# product term in the denominators of Indicator
I.model.index<- map_int(unique(flatten(cum_a.list) ), ~ which(map_lgl(flatten(cum_a.list), identical, .x))[1])
model.I<- flatten(pro.modelfits)[I.model.index]
model.I.list <-map(seq_len(ncol(active_s)), ~ model.I[which(!is.na(active_s[, .x]))])
}
# **********************************
# 4. potential outcome data --------
# **********************************
if(estimation == "EIF"){
phi.all <- matrix(NA,nc=K+1, nr=N) # calculation from muK to mu1
phi.all[,1] <- mu.all[,1]
for (i in K:1) {
active_i <- active_s.list[[i]]
## indicator I(t1 = , t2 =, ...)
Indicator_expr <- paste(map2(a.list[[i]], active_i, ~ paste0(.x, "==", .y)),
collapse = " & ")
I = eval(parse(text = Indicator_expr),envir = data)
## product.I:
product.I = prod_assign_modellist(model_list = model.I.list[[i]],
a_vars = a.list[[i]],
a_values = active_s.list[[i]] )
## Bayes density ratio
product.Bayes <- 1 # Initialize the product
# Iterate through previous indices j < i
for (j in seq_len(i - 1)) {
if (!all(active_s[,i] == active_s[,j],na.rm = T) ) {
product.Bayes <- product.Bayes *
(  prod_assign_modellist(pro.modelfits[[j+1]],a.list[[j]],active_s.list[[j]]) /  # use the value of itself to predict
prod_assign_modellist(pro.modelfits[[j+1]],a.list[[j]],active_s.list[[i]])    # use the value of i to predict
)*
(prod_assign_modellist(pro.modelfits[[j]],a.list[[j]],active_s.list[[i]])/
prod_assign_modellist(pro.modelfits[[j]],a.list[[j]],active_s.list[[j]]))
}
}
# sub EIF function for each row
phi.all[,i+1] = I/product.I*product.Bayes*(mu.all[,i+1]-mu.all[,i])
}
potential_data = rowSums(phi.all)
}
if(estimation=="G"){
potential_data = mu.all[,1]
}
if(estimation == "IPW"){
active_K <- active_s.list[[K]]
## indicator I(t1 = , t2 =, ...)
Indicator_expr <- paste(map2(a.list[[K]], active_K, ~ paste0(.x, "==", .y)),
collapse = " & ")
I = eval(parse(text = Indicator_expr),envir = data)
## product.I:
product.I = prod_assign_modellist(model_list = model.I.list[[K]],
a_vars = a.list[[K]],
a_values = active_s.list[[K]] )
## Bayes density ratio
product.Bayes <- 1 # Initialize the product
# Iterate through previous indices j < i
for (j in seq_len(K - 1)) {
if (!all(active_s[,K] == active_s[,j],na.rm = T) ) {
product.Bayes <- product.Bayes *
(  prod_assign_modellist(pro.modelfits[[j+1]],a.list[[j]],active_s.list[[j]]) /  # use the value of itself to predict
prod_assign_modellist(pro.modelfits[[j+1]],a.list[[j]],active_s.list[[K]])    # use the value of i to predict
)*
(prod_assign_modellist(pro.modelfits[[j]],a.list[[j]],active_s.list[[K]])/
prod_assign_modellist(pro.modelfits[[j]],a.list[[j]],active_s.list[[j]]))
}
}
# sub EIF function for each row
potential_data = I/product.I*product.Bayes*data[,Y]
}
# **********************************
#       5. results --------------
# **********************************
out = data.frame(active = paste0(map_chr(active, ~ paste0(na.omit(.x), collapse = "")),
collapse = ";"),
value = mean(potential_data,na.rm=T),
SE = sqrt(var(potential_data,na.rm=T)/nrow(data))
)
output <- list(call = cl,
pathsInfo =pathsInfo,
active = active_m,
results = out,
potential_data = potential_data)
class(output) <- 'mflexPotential'
return(output)
}
f1<-mflexPotential(EIF_fit, active =list(c(1,1,1),
c(NA,1,0)))
f1
EIF_fit <- pathsInfo(data = hierdt, A = c("sex","PPE"), Y = "motor_UPDRS", cov_x = c("age","subject","test_time"),
M.list = list(M1 = c("Jitter_Percent",'Jitter.RAP'), M2 = c("Shimmer","NHR")),
estimation = "EIF",
model.outcome =  ~ lmer(formula = motor_UPDRS ~ . +(test_time|subject)),
model.propensity = ~ glmer(formula = sex ~ . +(test_time|subject),
family = binomial())
)
list2env(EIF_fit, envir = environment())
data
# **********************************
#    1. data preparation ---------
# **********************************
## cov_x and mediators
N= nrow(data)
Km <- length(M.list)
# combine mediators
# mediators for model
active_m <- do.call(rbind, active)
M.index <- mcreate_index(active_m)[-(Km + 1)]
M.list_s <- combine_item(M.list, M.index)
cum_mediators <- cumulate_vars(c(list(cov_x),M.list_s))
cum_mediators
# treatment value for model
active_s <- simplify_active(active_m)
active_s
# treatment variables list; assigned value list
a.list <- map(seq_len(ncol(active_s)), ~ A[which(!is.na(active_s[, .x]))])
a.list
active_s.list<-map(1:ncol(active_s), ~ as.numeric(na.omit(active_s[, .x])))
active_s.list
# cumulative expression for model
cum_a.list <- map(a.list,~cumulate_vars(.x,first_null = T))
cum_a.list
cum_active_s.list<-map(active_s.list,~cumulate_vars(.x,first_null = T))
cum_active_s.list
K = length(cum_mediators)
K
out.details<- map(Omodel.lists,extract_model_details)
out.fit_names <- map(out.details, ~ paste0("fl_", .x$fit_name))
out.calls <-  map(out.details, "model_call")
iter.details<- map(Imodel.lists,extract_model_details)
iter.fit_names <- map(iter.details, ~ paste0("fl_", .x$fit_name))
iter.calls <- map(iter.details, "model_call")
if(Imodel.source == "default"){iter.calls <-map(iter.calls, ~ replace_family(.x))}
fit_names <- c(rep(iter.fit_names,K-1), out.fit_names)
mu.calls <- c(rep(iter.calls,K-1), out.calls)
# Innermost function
mu.all <- matrix(NA,nc=K+1,nr=N) # EE..E()|A,X)|..), ...., E(Y|mk,A,x), Y
mu.all[,K+1] <- data[,Y]
i=1
data$mu <- mu.all[,i+1]
data
i=K
data$mu <- mu.all[,i+1]
data
Ai_data = data
a.list[[i]]
active_s.list[[i]]
map_dfc(active_s.list[[i]], ~rep(.x, N))
Ai_data[,a.list[[i]]] = suppressMessages({map_dfc(active_s.list[[i]], ~rep(.x, N))})
Ai_data
model_fun <- match.fun(fit_names[[i]])
modelfit <- model_fun(data, X = c(a.list[[i]],cum_mediators[[i]]),Y = "mu", fl_call=mu.calls[[i]])
modelfit
modelfit$model
i=2
# print(modelfit)
mu.all[,i] <- predict(modelfit, Ai_data[,c(a.list[[i]],cum_mediators[[i]])])
i=K
# print(modelfit)
mu.all[,i] <- predict(modelfit, Ai_data[,c(a.list[[i]],cum_mediators[[i]])])
i=2
data$mu <- mu.all[,i+1]
Ai_data = data
Ai_data[,a.list[[i]]] = suppressMessages({map_dfc(active_s.list[[i]], ~rep(.x, N))})
model_fun <- match.fun(fit_names[[i]])
modelfit <- model_fun(data, X = c(a.list[[i]],cum_mediators[[i]]),Y = "mu", fl_call=mu.calls[[i]])
modelfit$model
cum_mediators
a.list
# Innermost function
mu.all <- matrix(NA,nc=K+1,nr=N) # EE..E()|A,X)|..), ...., E(Y|mk,A,x), Y
mu.all[,K+1] <- data[,Y]
# iterative outcome model
for(i in K:1){
data$mu <- mu.all[,i+1]
Ai_data = data
Ai_data[,a.list[[i]]] = suppressMessages({map_dfc(active_s.list[[i]], ~rep(.x, N))})
model_fun <- match.fun(fit_names[[i]])
modelfit <- model_fun(data, X = c(a.list[[i]],cum_mediators[[i]]),Y = "mu", fl_call=mu.calls[[i]])
print(modelfit$model)
mu.all[,i] <- predict(modelfit, Ai_data[,c(a.list[[i]],cum_mediators[[i]])])
}
active_s.list
cum_mediators
active_m
active_s
a.list
pro.details<- extract_model_details(Pmodel.lists[[1]])
pro.fit_names <-paste0("fl_", pro.details$fit_name)
pro.calls <- pro.details$model_call
pro.calls
pro.modelfits<-pmap(list(cum_mediators, cum_a.list, a.list),
function(mediator, a_predictor, a_out){
model_fun <- match.fun(pro.fit_names)
modelfit <- map2(a_predictor,a_out,
~{model_fun(data, X = c(mediator,.x) ,Y = .y, fl_call =pro.calls)})
print(modelfit$model)
return(modelfit)
})
pro.modelfits
# product term in the denominators of Indicator
I.model.index<- map_int(unique(flatten(cum_a.list) ), ~ which(map_lgl(flatten(cum_a.list), identical, .x))[1])
model.I<- flatten(pro.modelfits)[I.model.index]
model.I.list <-map(seq_len(ncol(active_s)), ~ model.I[which(!is.na(active_s[, .x]))])
model.I.list
phi.all <- matrix(NA,nc=K+1, nr=N) # calculation from muK to mu1
phi.all[,1] <- mu.all[,1]
for (i in K:1) {
active_i <- active_s.list[[i]]
## indicator I(t1 = , t2 =, ...)
Indicator_expr <- paste(map2(a.list[[i]], active_i, ~ paste0(.x, "==", .y)),
collapse = " & ")
I = eval(parse(text = Indicator_expr),envir = data)
## product.I:
product.I = prod_assign_modellist(model_list = model.I.list[[i]],
a_vars = a.list[[i]],
a_values = active_s.list[[i]] )
## Bayes density ratio
product.Bayes <- 1 # Initialize the product
# Iterate through previous indices j < i
for (j in seq_len(i - 1)) {
if (!all(active_s[,i] == active_s[,j],na.rm = T) ) {
product.Bayes <- product.Bayes *
(  prod_assign_modellist(pro.modelfits[[j+1]],a.list[[j]],active_s.list[[j]]) /  # use the value of itself to predict
prod_assign_modellist(pro.modelfits[[j+1]],a.list[[j]],active_s.list[[i]])    # use the value of i to predict
)*
(prod_assign_modellist(pro.modelfits[[j]],a.list[[j]],active_s.list[[i]])/
prod_assign_modellist(pro.modelfits[[j]],a.list[[j]],active_s.list[[j]]))
}
}
# sub EIF function for each row
phi.all[,i+1] = I/product.I*product.Bayes*(mu.all[,i+1]-mu.all[,i])
}
potential_data = rowSums(phi.all)
f2<-flexPotential(EIF_fit, active = list(c(1,1,1),
c(NA,0,0)))
f2<-mflexPotential(EIF_fit, active = list(c(1,1,1),
c(NA,0,0)))
f2
flexEffect(f1,f2,nboot = 10,m.cores = 3)
rlang::last_trace()
rlang::last_trace(drop = FALSE)
flexEffect(f1,f2,nboot = 3,m.cores=)
library(knitr)
opts_chunk$set(warning = FALSE, message = FALSE, eval= T,collapse = T)
mfit<- pathsInfo(data = multiTreat,
Y = "Y",
A = c("t1","t2"),
cov_x = "X",
M.list = list(
M1 = 'm1',
M2 = 'm2'
),
estimation = "EIF",
model.propensity =list(~ glm(formula = Y~ . + I(X^2),family = binomial())),
model.outcome = list(~ glm(formula = Y~ . + I(X^0.5),family = gaussian()))
)
data("multiTreat")
mfit<- pathsInfo(data = multiTreat,
Y = "Y",
A = c("t1","t2"),
cov_x = "X",
M.list = list(
M1 = 'm1',
M2 = 'm2'
),
estimation = "EIF",
model.propensity =list(~ glm(formula = Y~ . + I(X^2),family = binomial())),
model.outcome = list(~ glm(formula = Y~ . + I(X^0.5),family = gaussian()))
)
mflexPotential(mfit,active = list(a1=c(0,0,1),
a2=c(NA,0,1)))
?SuperLearner
EIF_fit <- pathsInfo(data = hierdt, A = c("sex"), Y = "motor_UPDRS", cov_x = c("age","subject","test_time"),
M.list = list(M1 = c("Jitter_Percent",'Jitter.RAP'), M2 = c("Shimmer","NHR")),
estimation = "EIF",
model.outcome =  ~ lmer(formula = motor_UPDRS ~ . +(test_time|subject)),
model.propensity = ~ glmer(formula = sex ~ . +(test_time|subject),
family = binomial())
)
results_refer_lmer <- pathsEffect(pathsInfo = EIF_fit, decomposition = "sequential", scale = "diff",
CI_level = 0.95)
results_refer_lmer
# SuperLearner id
EIF_fit <- pathsInfo(data = hierdt, A = c("sex"), Y = "motor_UPDRS", cov_x = c("age","subject","test_time"),
M.list = list(M1 = c("Jitter_Percent",'Jitter.RAP'), M2 = c("Shimmer","NHR")),
estimation = "EIF",
model.outcome =  ~ SuperLearner(SL.library=c("SL.glm", "SL.randomForest", "SL.gam"),
family = gaussian(), id = 'subject'),
model.propensity = ~ SuperLearner(SL.library=c("SL.glm", "SL.randomForest", "SL.gam"),
family = binomial(), id = 'subject')
)
results_refer_SL <- pathsEffect(pathsInfo = EIF_fit, decomposition = "sequential", scale = "diff",
CI_level = 0.95)
# SuperLearner id
library(randomForest)
library(gam)
EIF_fit <- pathsInfo(data = hierdt, A = c("sex"), Y = "motor_UPDRS", cov_x = c("age","subject","test_time"),
M.list = list(M1 = c("Jitter_Percent",'Jitter.RAP'), M2 = c("Shimmer","NHR")),
estimation = "EIF",
model.outcome =  ~ SuperLearner(SL.library=c("SL.glm", "SL.randomForest", "SL.gam"),
family = gaussian(), id = 'subject'),
model.propensity = ~ SuperLearner(SL.library=c("SL.glm", "SL.randomForest", "SL.gam"),
family = binomial(), id = 'subject')
)
results_refer_SL <- pathsEffect(pathsInfo = EIF_fit, decomposition = "sequential", scale = "diff",
CI_level = 0.95)
SuperLearner(Y=hierdt[,"motor_UPDRS"],X = hierdt[,c("age","subject","test_time")],SL.library=c("SL.glm", "SL.randomForest", "SL.gam"),
family = binomial(), id = 'subject')
SuperLearner(Y=hierdt[,"motor_UPDRS"],X = hierdt[,c("age","subject","test_time")],SL.library=c("SL.glm", "SL.randomForest", "SL.gam"),
family = binomial(), id = subject)
SuperLearner(Y=hierdt[,"motor_UPDRS"],X = hierdt[,c("age","subject","test_time")],SL.library=c("SL.glm", "SL.randomForest", "SL.gam"),
family = binomial(), id = hierdt[,"subject"])
EIF_fit <- pathsInfo(data = hierdt, A = c("sex"), Y = "motor_UPDRS", cov_x = c("age","subject","test_time"),
M.list = list(M1 = c("Jitter_Percent",'Jitter.RAP'), M2 = c("Shimmer","NHR")),
estimation = "EIF",
model.outcome =  ~ SuperLearner(SL.library=c("SL.glm", "SL.randomForest", "SL.gam"),
family = gaussian(), id = data[,'subject']),
model.propensity = ~ SuperLearner(SL.library=c("SL.glm", "SL.randomForest", "SL.gam"),
family = binomial(), id = data[,'subject'])
)
SuperLearner(Y=hierdt[,"motor_UPDRS"],X = hierdt[,c("age","subject","test_time")],SL.library=c("SL.glm", "SL.randomForest", "SL.gam"),
family = gaussian(), id = hierdt[,"subject"])
results_refer_SL <- pathsEffect(pathsInfo = EIF_fit, decomposition = "sequential", scale = "diff",
CI_level = 0.95)
# superlearner
SuperLearner(Y=hierdt[,"motor_UPDRS"],X = hierdt[,c("age","test_time")],SL.library=c( "SL.randomForest", "SL.mean"),
family = gaussian(), id = hierdt[,"subject"])
# fl_call try -------------
model_formula = ~ SuperLearner(SL.library=c("SL.glm", "SL.randomForest", "SL.gam"),
family = binomial(), id = 'subject')
fl_call = extract_model_details(model_formula)[[2]]
fl_call
fl_call$id
!is.null(fl_call$id)
fl_call$id
dataX = hierdt[,c("age","test_time","subject")]
dataX
names(dataX)
fl_call$id
X_train = dataX[, names(dataX) != fl_call$id]
X_train
!is.null(fl_call$id)
dataX[,fl_call$id]
quote(dataX[,fl_call$id])
as.name(fl_call$id)
dataX[, as.name(fl_call$id)]
quote(dataX[, as.name(fl_call$id)])
fl_call$id
X_train = dataX[, names(dataX) != fl_call$id]
X_train
X_id = dataX[, fl_call$id]
X_id
fl_call
fl_call$id = quote(X_id)
fl_call
# write the full formula
fl_call$X =quote(X_train); fl_call$Y = quote(Y_train)
fl_call
Y_train
Y_train = hierdt[,"motor_UPDRS"]
# write the full formula
fl_call$X =quote(X_train); fl_call$Y = quote(Y_train)
fl_call
# fl_call try -------------
model_formula = ~ SuperLearner(SL.library=c("SL.glm", "SL.randomForest", "SL.gam"),
family = gaussian(), id = 'subject')
fl_call = extract_model_details(model_formula)[[2]]
fl_call
# cluster data
if(!is.null(fl_call$id)){
X_train = dataX[, names(dataX) != fl_call$id]
X_id = dataX[, fl_call$id]
fl_call$id = quote(X_id)
}else{X_train = dataX}
# write the full formula
fl_call$X =quote(X_train); fl_call$Y = quote(Y_train)
fl_call
# Fit the model
model <-eval(fl_call)
model
# fl_call try -------------
model_formula = ~ SuperLearner(SL.library=c("SL.glm", "SL.randomForest", "SL.gam"),
family = gaussian())
fl_call = extract_model_details(model_formula)[[2]]
dataX
Y_train
# cluster data
if(!is.null(fl_call$id)){
X_train = dataX[, names(dataX) != fl_call$id]
X_id = dataX[, fl_call$id]
fl_call$id = quote(X_id)
}else{X_train = dataX}
X_train
# write the full formula
fl_call$X =quote(X_train); fl_call$Y = quote(Y_train)
fl_call
# Fit the model
model <-eval(fl_call)
freshr::freshr()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
dat<- read.csv("~/learn/BIOS_master/BIOS 526/hw/hw2/parkinsons.csv")
hierdt <- dat %>% mutate(
age = scale(age),
test_time = scale(test_time))
View(hierdt)
# lmer
fit.time.scale = lmer(motor_UPDRS ~ age+Jitter_Percent+Shimmer+NHR+PPE+
(test_time|subject),data = hierdt)
summary(fit.time.scale)
# lmer
fit.time.scale = lmer(motor_UPDRS ~ age+Jitter_Percent+Shimmer+NHR+PPE+
(age|subject),data = hierdt)
summary(fit.time.scale)
?lm
?glm
# mixed effect model ---------------
library(lme4)
library(tidyverse)
dat<- read.csv("~/learn/BIOS_master/BIOS 526/hw/hw2/parkinsons.csv")
hierdt <- dat %>% mutate(
age = scale(age),
test_time = scale(test_time))
hierdt_distinct<-hierdt %>% distinct(age, sex,subject)
View(hierdt)
hierdt <- dat %>% mutate(
age = scale(age),
test_time = scale(test_time))
hierdt_distinct<-hierdt %>% distinct(age, sex,subject)
View(hierdt)
dat<- read.csv("~/learn/BIOS_master/BIOS 526/hw/hw2/parkinsons.csv")
View(dat)
hierdt <- dat %>% mutate(
age = scale(age),
test_time = scale(test_time))
View(hierdt)
hierdt$age
hierdt <- dat %>% mutate(
age = scale(age)[,1],
test_time = scale(test_time))
View(hierdt)
hierdt <- dat %>% mutate(
age = scale(age)[,1],
test_time = scale(test_time))[,1]
hierdt <- dat %>% mutate(
age = scale(age)[,1],
test_time = scale(test_time)[,1])
View(hierdt)
View(hierdt)
pacman::p_load(dbarts,purrr,SuperLearner, dplyr)
library(flexPaths)
data("singTreat")
data("multiTreat")
EIF_fit <- pathsInfo(data = singTreat, A = "treat", Y = "outcome1", cov_x = c("X1", "X2"),
M.list = list(M1 = "med1", M2 = c('med2_1', 'med2_2'), M3 = 'med3'),
estimation = "EIF",
model.outcome = list(~ lm()),
model.propensity = ~ glm(family = binomial())
)
EIF_fit <- pathsInfo(data = singTreat, A = "treat", Y = "outcome1", cov_x = c("X1", "X2"),
M.list = list(M1 = "med1", M2 = c('med2_1', 'med2_2'), M3 = 'med3'),
estimation = "EIF",
model.outcome = ~glm(family = gaussian()),
model.propensity = ~glm(family = binomial())
)
pp<-pathsEffect(EIF_fit,nboot = 10,m.cores = 4)
pp
inherits(pp,"pathsEffect")
inherits(pp,"pathsInfo")
library(mediation)
library(flexPaths)
?pathsInfo
?pathEffect
