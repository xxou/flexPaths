method = "Robust",
scale = "ratio",
boot = T,
boot_ratio = 0.8,
boot_rep = 20,
seed_num = 123,
double_mont = 1e5,
single_mont = 2e5,
b_rep = TRUE)
ff
devtools::check()
![](pic/DAG_oneT.jpg){width="350"}
sessionInfo()
pacman::p_load(dbarts,purrr,SuperLearner, dplyr)
data("singTreat")
data("multiTreat")
# Get a list of all R files in the folder
r_files <- list.files(path = "R", pattern = "\\.R$", full.names = TRUE)
walk(r_files, source)
library(knitr)
opts_chunk$set(warning = FALSE, message = FALSE, eval=F)
1+1
data("singTreat")
data("singTreat")
head(singTreat)
EIF_fit <- pathsFit(data = singTreat, A = "treat", Y = "outcome1", cov_x = c("X1", "X2"),
M.list = list(M1 = "med1", M2 = c('med2_1', 'med2_2'), M3 = 'med3'),
estimation = "EIF",
model.outcome = list(~ glm(family = gaussian())),
model.propensity = ~ bart(verbose = FALSE, ndpost = 200)
)
EIF_fit <- pathsFit(data = singTreat, A = "treat", Y = "outcome1", cov_x = c("X1", "X2"),
M.list = list(M1 = "med1", M2 = c('med2_1', 'med2_2'), M3 = 'med3'),
estimation = "EIF",
model.outcome = ~ glm(family = gaussian()),
model.propensity = ~ glm(family = binomial())
)
effect_results1 <- pathsEffect(pathsFit = EIF_fit, decomposition = "refer0", scale = "diff", CI_level = 0.95)
effect_results2 <- pathsEffect(pathsFit = EIF_fit, decomposition = "refer0", scale = "diff", CI_level = 0.95, nboot = 100, m.cores = 6)
EIF_fit <- pathsFit(data = singTreat, A = "treat", Y = "outcome1", cov_x = c("X1", "X2"),
M.list = list(M1 = "med1", M2 = c('med2_1', 'med2_2'), M3 = 'med3'),
estimation = "EIF",
model.outcome = ~ glm(family = gaussian()),
model.propensity = ~ glm(family = binomial())
)
effect_results1 <- pathsEffect(pathsFit = EIF_fit, decomposition = "refer0", scale = "diff", CI_level = 0.95)
effect_results2 <- pathsEffect(pathsFit = EIF_fit, decomposition = "refer0", scale = "diff", CI_level = 0.95, nboot = 100, m.cores = 6)
effect_results3 <- pathsEffect( pathsFit = EIF_fit, decomposition = "sequential", scale = "diff", CI_level = 0.95)
results_refer0 <- pathsEffect(pathsFit = EIF_fit, decomposition = "refer0", scale = "diff", CI_level = 0.95)
results_refer0 <- pathsEffect(pathsFit = EIF_fit, decomposition = "refer0", scale = "diff", CI_level = 0.95)
results_refer0
results_refer0 <- pathsEffect(pathsFit = EIF_fit, decomposition = "refer0", scale = "diff", CI_level = 0.95)
results_refer0
results_seq <- pathsEffect(pathsFit = EIF_fit, decomposition = "refer0", scale = "diff", CI_level = 0.95)
results_seq
results_refer0 <- pathsEffect(pathsFit = EIF_fit, decomposition = "refer0", scale = "diff", CI_level = 0.95)
results_refer0
results_seq <- pathsEffect(pathsFit = EIF_fit, decomposition = "refer0", scale = "diff", CI_level = 0.95)
results_seq
results_refer0 <- pathsEffect(pathsFit = EIF_fit, decomposition = "refer0", scale = "diff", CI_level = 0.95)
results_refer0
results_seq <- pathsEffect(pathsFit = EIF_fit, decomposition = "sequential", scale = "diff", CI_level = 0.95)
results_seq
results_refer0 <- pathsEffect(pathsFit = EIF_fit, decomposition = "refer0", scale = "diff", CI_level = 0.95)
results_refer0
results_seq <- pathsEffect(pathsFit = EIF_fit, decomposition = "sequential", scale = "diff", CI_level = 0.95)
results_seq
results_boot <- pathsEffect( pathsFit = EIF_fit, decomposition = "sequential", scale = "diff", CI_level = 0.95, nboot = 10, m.cores = NULL)
results_boot <- pathsEffect( pathsFit = EIF_fit, decomposition = "sequential", scale = "diff", CI_level = 0.95, nboot = 10, m.cores = 3)
results_boot
flex_results1 <- flexEffect(p1 = potential_outcome1,
p0 = potential_outcome0, scale = "diff", CI_level = 0.95,nboot = 10, m.cores = 3)
potential_outcome0 <- flexPotential(pathsFit = EIF_fit, active = c(0, 0, 0, 0))
potential_outcome1 <- flexPotential(pathsFit = EIF_fit, active = c(1, 0, 1, 1))
potential_outcome2<- flexPotential(pathsFit = EIF_fit, active = c(1, 0, 0, 1))
flex_results1 <- flexEffect(p1 = potential_outcome1,
p0 = potential_outcome0, scale = "diff", CI_level = 0.95,nboot = 10, m.cores = 3)
flex_results1
flex_results <- flexEffect(p1 = list(potential_outcome1, potential_outcome2),
p0 = potential_outcome0, scale = "diff", CI_level = 0.95,nboot = 5)
flex_results
potential_outcome0 <- flexPotential(pathsFit = EIF_fit, active = c(0, 0, 0, 0))
potential_outcome1 <- flexPotential(pathsFit = EIF_fit, active = c(1, 0, 1, 1))
potential_outcome2 <- flexPotential(pathsFit = EIF_fit, active = c(1, 0, 0, 1))
potential_outcome3 <- flexPotential(pathsFit = EIF_fit, active = c(1, 1, 0, 0))
potential_outcome0 <- flexPotential(pathsFit = EIF_fit, active = c(0, 0, 0, 0))
potential_outcome1 <- flexPotential(pathsFit = EIF_fit, active = c(1, 0, 1, 1))
potential_outcome2 <- flexPotential(pathsFit = EIF_fit, active = c(1, 0, 0, 1))
potential_outcome3 <- flexPotential(pathsFit = EIF_fit, active = c(1, 0, 0, 0))
flex_results <- flexEffect(p1 = list(potential_outcome1),
p0 = list(potential_outcome2,potential_outcome3), scale = "diff", CI_level = 0.95,nboot = 5)
flex_results
data("multiTreat")
head(multiTreat)
#' @export
print.pathsFit <- function(x){
cat("\n")
cat("Paths Parameters")
cat("\n\n")
cat(x$fit_type,x$A,"; outcome:", x$Y,"; covariates:", x$cov_x)
cat("\n\n")
cat("mediators:")
cat("\n\n")
print(x$M.list)
}
walk(r_files, source)
# Get a list of all R files in the folder
r_files <- list.files(path = "R", pattern = "\\.R$", full.names = TRUE)
walk(r_files, source)
pacman::p_load(dbarts,purrr,SuperLearner, dplyr)
data("singTreat")
data("multiTreat")
# Get a list of all R files in the folder
r_files <- list.files(path = "R", pattern = "\\.R$", full.names = TRUE)
walk(r_files, source)
EIF_fit <- pathsFit(data = singTreat, A = "treat", Y = "outcome1", cov_x = c("X1", "X2"),
M.list = list(M1 = "med1", M2 = c('med2_1', 'med2_2'), M3 = 'med3'),
estimation = "EIF",
model.outcome = list(~ glm(family = gaussian())),
model.propensity = ~ bart(verbose = FALSE, ndpost = 200)
)
EIF_fit
#' @export
print.pathsFit <- function(x){
cat("\n")
cat("Paths Parameters")
cat("\n\n")
cat(x$fit_type,":",x$A,"; outcome:", x$Y,"; covariates:", x$cov_x)
cat("\n\n")
cat("mediators:")
cat("\n\n")
print(x$M.list)
}
EIF_fit
# Get a list of all R files in the folder
r_files <- list.files(path = "R", pattern = "\\.R$", full.names = TRUE)
walk(r_files, source)
EIF_fit <- pathsFit(data = singTreat, A = "treat", Y = "outcome1", cov_x = c("X1", "X2"),
M.list = list(M1 = "med1", M2 = c('med2_1', 'med2_2'), M3 = 'med3'),
estimation = "EIF",
model.outcome = list(~ glm(family = gaussian())),
model.propensity = ~ bart(verbose = FALSE, ndpost = 200)
)
EIF_fit
EIF_fit$type
flexEffect(p1 = mp1, p0 = mp2, scale = "diff", CI_level = 0.95, nboot =10 , m.cores = 6)
mp1<-mflexPotential(active = list(a1=c(0,1,0,0,1,0,0),
a2=c(1,0,1,1,1,0,0),
a3=c(NA,NA,NA,1,0,0,0)),mfit)
mfit<- pathsFit(data = multiTreat,
Y = "Y",
A = c("t1","t2","t3"),
cov_x = "X",
M.list = list(
M1 = 'm1',
M2 = 'm2',
M3 = 'm3',
M4 = 'm4',
M5 = 'm5',
M6 = 'm6'
),
estimation = "EIF",
model.propensity =list( ~  glm(family = binomial())),
model.outcome = list( ~SuperLearner(SL.library = "SL.mean",family = gaussian())),
model.iter  = list(~glm(family = gaussian()))
)
mp1<-mflexPotential(active = list(a1=c(0,1,0,0,1,0,0),
a2=c(1,0,1,1,1,0,0),
a3=c(NA,NA,NA,1,0,0,0)),mfit)
mp2<-mflexPotential(active = list(a1=c(0,0,0,0,1,0,0),
a2=c(0,0,0,1,1,0,0),
a3=c(NA,NA,NA,1,0,0,0)),mfit)
flexEffect(p1 = mp1, p0 = mp2, scale = "diff", CI_level = 0.95, nboot =10 , m.cores = 6)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(survival,tidyverse)
type = c(rep('astrocytoma',10),rep('glioblastoma',10))
time = c(6,6,13,21,30,31,37,38,47,49,10,10,13,25,33,36,47,49,50,50)
status = c(1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0,0)
Glioma_dt<-data.frame(type,time,status)
astrocytoma_dt<- Glioma_dt %>% filter(type=='astrocytoma')
glioblastoma_dt<- Glioma_dt %>% filter(type=='glioblastoma')
Glioma.fit <- survfit(Surv(time,status) ~ type,
data=Glioma_dt, conf.type="log-log")
plot(Glioma.fit,
xlab = "Survival time after recurrent Glioma (weeks)",
ylab = "Survival probability",
main = "survival after recurrent astrocytoma")
legend("bottomleft", legend=c("No Atrial Fibrillation","Atrial Fibrillation"), lty=c(1,2))
Glioma.fit <- survfit(Surv(time,status) ~ type,
data=Glioma_dt, conf.type="log-log")
plot(Glioma.fit,lty=c(1,2),
xlab = "Survival time after recurrent Glioma (weeks)",
ylab = "Survival probability",
main = "survival after recurrent astrocytoma")
legend("bottomleft", legend=c("No Atrial Fibrillation","Atrial Fibrillation"), lty=c(1,2))
Glioma.fit <- survfit(Surv(time,status) ~ type,
data=Glioma_dt, conf.type="log-log")
Glioma.fit
plot(Glioma.fit,lty=c(1,2),
xlab = "Survival time after recurrent Glioma (weeks)",
ylab = "Survival probability",
main = "survival after recurrent astrocytoma")
legend("bottomleft", legend=c("No Atrial Fibrillation","Atrial Fibrillation"), lty=c(1,2))
Glioma.fit <- survfit(Surv(time,status) ~ type,
data=Glioma_dt, conf.type="log-log")
Glioma.fit
plot(Glioma.fit,lty=c(1,2),
xlab = "Survival time after recurrent Glioma (weeks)",
ylab = "Survival probability",
main = "survival after recurrent astrocytoma")
legend("bottomleft", legend=c("astrocytoma","Atrial glioblastoma"), lty=c(1,2))
Glioma.fit <- survfit(Surv(time,status) ~ type,
data=Glioma_dt, conf.type="log-log")
Glioma.fit
plot(Glioma.fit,lty=c(1,2),
xlab = "Survival time after recurrent Glioma (weeks)",
ylab = "Survival probability",
main = "survival after recurrent astrocytoma")
legend("bottomleft", legend=c("astrocytoma","glioblastoma"), lty=c(1,2))
type = c(rep('astrocytoma',10),rep('glioblastoma',10))
time = c(6,6,13,21,30,31,37,38,47,49,10,10,13,25,33,36,47,49,50,50)
status = c(1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0,0)
Glioma_dt<-data.frame(type,time,status) %>%
mutate(type = factor(type, level=c('astrocytoma','glioblastoma')))
astrocytoma_dt<- Glioma_dt %>% filter(type=='astrocytoma')
glioblastoma_dt<- Glioma_dt %>% filter(type=='glioblastoma')
Glioma.fit <- survfit(Surv(time,status) ~ type,
data=Glioma_dt, conf.type="log-log")
Glioma.fit
plot(Glioma.fit,lty=c(1,2),
xlab = "Survival time after recurrent Glioma (weeks)",
ylab = "Survival probability",
main = "survival after recurrent Glioma")
legend("bottomleft", legend=c("astrocytoma","glioblastoma"), lty=c(1,2))
Glioma.fit <- survfit(Surv(time,status) ~ type,
data=Glioma_dt, conf.type="log-log")
Glioma.fit
plot(Glioma.fit,lty=c(1,2),
xlab = "Survival time after recurrent Glioma (weeks)",
ylab = "Survival probability",
main = "Survival after recurrent Glioma")
legend("bottomleft", legend=c("astrocytoma","glioblastoma"), lty=c(1,2))
astrocytoma.fit <- survfit(Surv(time,status) ~ 1,
data=astrocytoma_dt, conf.type="log-log")
astrocytoma.fit
glioblastoma.fit <- survfit(Surv(time,status) ~ 1,
data=glioblastoma_dt, conf.type="log-log")
glioblastoma.fit
astrocytoma.log_log
library(flexPaths)
?pathsFit
library(knitr)
opts_chunk$set(warning = FALSE, message = FALSE, eval= T)
EIF_fit <- pathsFit(data = singTreat, A = "treat", Y = "outcome1", cov_x = c("X1", "X2"),
M.list = list(M1 = "med1", M2 = c('med2_1', 'med2_2'), M3 = 'med3'),
estimation = "EIF",
model.outcome = ~SuperLearner(SL.library = c('randomForest','xgboost'),family = gaussian()),
model.propensity = ~ bart(verbose = FALSE, ndpost = 200)
)
data("singTreat")
head(singTreat)
EIF_fit <- pathsFit(data = singTreat, A = "treat", Y = "outcome1", cov_x = c("X1", "X2"),
M.list = list(M1 = "med1", M2 = c('med2_1', 'med2_2'), M3 = 'med3'),
estimation = "EIF",
model.outcome = ~SuperLearner(SL.library = c('randomForest','xgboost'),family = gaussian()),
model.propensity = ~ bart(verbose = FALSE, ndpost = 200)
)
EIF_fit <- pathsFit(data = singTreat, A = "treat", Y = "outcome1", cov_x = c("X1", "X2"),
M.list = list(M1 = "med1", M2 = c('med2_1', 'med2_2'), M3 = 'med3'),
estimation = "EIF",
model.outcome = ~ SuperLearner(SL.library = c('randomForest','xgboost'),family = gaussian()),
model.propensity = list(~ bart(verbose = FALSE, ndpost = 200),
~ glm(family = binomial()),
~ SuperLearner(SL.library = c('randomForest','xgboost'),family = binomial()))
)
EIF_fit <- pathsFit(data = singTreat, A = "treat", Y = "outcome1", cov_x = c("X1", "X2"),
M.list = list(M1 = "med1", M2 = c('med2_1', 'med2_2'), M3 = 'med3'),
estimation = "EIF",
model.outcome = ~ SuperLearner(SL.library = c('randomForest','xgboost'),family = gaussian()),
model.propensity = list(~ bart(verbose = FALSE, ndpost = 200),
~ glm(family = binomial()),
~ SuperLearner(SL.library = c('randomForest','xgboost'),family = binomial()),
~ glm(family = binomial()))
)
EIF_fit <- pathsFit(data = singTreat, A = "treat", Y = "outcome1", cov_x = c("X1", "X2"),
M.list = list(M1 = "med1", M2 = c('med2_1', 'med2_2'), M3 = 'med3'),
estimation = "EIF",
model.outcome = ~ SuperLearner(SL.library = c('randomForest','xgboost'),family = gaussian()),
model.propensity = list(cov_x = ~ bart(verbose = FALSE, ndpost = 200),
M1 = ~ glm(family = binomial()),
M2 = ~ SuperLearner(SL.library = c('randomForest','xgboost'),family = binomial()),
M3 = ~ glm(family = binomial()))
)
glm(formula = outcome1 ~X1+X2 ,family = gaussian())
glm(formula = outcome1 ~X1+X2 ,family = gaussian(),singTreat)
EIF_fit <- pathsFit(data = singTreat, A = "treat", Y = "outcome1", cov_x = c("X1", "X2"),
M.list = list(M1 = "med1", M2 = c('med2_1', 'med2_2'), M3 = 'med3'),
estimation = "EIF",
model.outcome = list(cov_x = ~ glm(formula = outcome1 ~X1*X2 ,family = gaussian()),
M1 = ~ glm(formula = outcome1 ~med1+X1*X2, family = gaussian()),
M2 = ~ glm(formula = outcome1 ~med1+med2_1*med2_1+X1*X2, family = gaussian()),
M3 = ~ glm(formula = outcome1 ~med1+med2_1*med2_1+med3+X1*X2, family = gaussian())),
model.propensity = list( ~ bart(verbose = FALSE, ndpost = 200))
)
?lm()
## remember to write a note for any input in the model, please point the args name
# of the orginial model for run
#  SL ------------
#' @import stats
#' @import SuperLearner
#' @export
fl_SuperLearner <- function(data, X = c(""), Y = " ", fl_call) {
# get the data
X_train <- data[, X, drop=FALSE]
Y_train <- data[,Y]
# write the full formula
fl_call$X =quote(X_train); fl_call$Y = quote(Y_train)
# Fit the model
model <-eval(fl_call)
# output
out = list(model = model, coef=model$coef,dataX=X_train) #pred = model$SL.predict
class(out) = c("fl_SuperLearner")
return(out)
}
#' @export
predict.fl_SuperLearner <- function(object, newdata) {
# order of X!!!!!
# Extract the fitted model object from the input
model <- object$model
# Predict using the fitted model
pred <- predict(model, newdata = newdata)$pred
return(pred)
}
# revise: do not need to specify the train.X,
# just input whole data, it will directly get the predictors.name
# glm ------------
#' @import stats
#' @export
#'
fl_glm <- function(data, X = c(""), Y = " ", fl_call) {
# Fit the model
dataX <- data[, X,drop = FALSE]
data <- data[,c(X,Y)]
if ("formula" %in% names(fl_call)) {
# Extract the current formula
# Modify the formula by replacing the left-hand side with Y
fl_call$formula <- substitute(Y ~ predictors, list(Y = as.name(Y), predictors = fl_call$formula[[3]]))
}else{
# Replace the formula in the original call
fl_call$formula <- as.formula(paste0(Y, "~ ."))
}
fl_call$data = quote(data)
model <- eval(fl_call)
# Output
out <- list(model = model,dataX=dataX) # pred = model$fitted.values
class(out) <- "fl_glm"
return(out)
}
# Define the prediction function for fl_glm
#' @export
predict.fl_glm <- function(object, newdata) {
# Extract the fitted model object from the input
model <- object$model
# Predict using the fitted model
pred <- predict(model, newdata = newdata, type = "response")
return(pred)
}
# lm ------------
#' @import stats
#' @export
#'
fl_lm <- function(data, X = c(""), Y = " ", fl_call) {
# Fit the model
dataX <- data[, X,drop = FALSE]
data <- data[,c(X,Y)]
if ("formula" %in% names(fl_call)) {
# Extract the current formula
# Modify the formula by replacing the left-hand side with Y
fl_call$formula <- substitute(Y ~ predictors, list(Y = as.name(Y), predictors = fl_call$formula[[3]]))
}else{
# Replace the formula in the original call
fl_call$formula <- as.formula(paste0(Y, "~ ."))
}
fl_call$data = quote(data)
model <- eval(fl_call)
# Output
out <- list(model = model,dataX=dataX) # pred = model$fitted.values
class(out) <- "fl_lm"
return(out)
}
# Define the prediction function for fl_glm
#' @export
predict.fl_lm <- function(object, newdata) {
# Extract the fitted model object from the input
model <- object$model
# Predict using the fitted model
pred <- predict(model, newdata = newdata)
return(pred)
}
# fl_dbarts ------------
#' @import stats  dbarts
#' @export
fl_bart <- function(data, X = c(""), Y = " ", fl_call) {
# Extract training data
X_train <- data[, X, drop = FALSE]
Y_train <- data[, Y]
# Constructing the function call string for BART
fl_call$x.train = quote(X_train); fl_call$y.train = quote(Y_train)
fl_call$keeptrees = TRUE
# Fit the model
model <- eval(fl_call)
# Output
out <- list(model = model,dataX=X_train)
class(out) <- "fl_bart"
return(out)
}
#' @export
predict.fl_bart <- function(object, newdata) {
# Extract the fitted model object from the input
model <- object$model
# Predict using the fitted model
pred <- colMeans(predict(model, newdata = newdata))
return(pred)
}
freshr::freshr()
pacman::p_load(dbarts,purrr,SuperLearner, dplyr)
data("singTreat")
data("multiTreat")
# Get a list of all R files in the folder
r_files <- list.files(path = "R", pattern = "\\.R$", full.names = TRUE)
walk(r_files, source)
EIF_fit <- pathsInfo(data = singTreat, A = "treat", Y = "outcome1", cov_x = c("X1", "X2"),
M.list = list(M1 = "med1", M2 = c('med2_1', 'med2_2'), M3 = 'med3'),
estimation = "EIF",
model.outcome = list(~ lm()),
model.propensity = ~ bart(verbose = FALSE, ndpost = 200)
)
# build package --------
?pathsEffect()
pathsEffect(EIF_fit)
EIF_fit <- pathsInfo(data = singTreat, A = "treat", Y = "outcome1", cov_x = c("X1", "X2"),
M.list = list(M1 = "med1", M2 = c('med2_1', 'med2_2'), M3 = 'med3'),
estimation = "EIF",
model.outcome = list(~ glm()),
model.propensity = ~ bart(verbose = FALSE, ndpost = 200)
)
pathsEffect(EIF_fit)
EIF_fit <- pathsInfo(data = singTreat, A = "treat", Y = "outcome1", cov_x = c("X1", "X2"),
M.list = list(M1 = "med1", M2 = c('med2_1', 'med2_2'), M3 = 'med3'),
estimation = "EIF",
model.outcome = list(~ lm()),
model.propensity = ~ glm(family = binomial())
)
pathsEffect(EIF_fit)
EIF_fit <- pathsInfo(data = singTreat, A = "treat", Y = "outcome1", cov_x = c("X1", "X2"),
M.list = list(M1 = "med1", M2 = c('med2_1', 'med2_2'), M3 = 'med3'),
estimation = "EIF",
model.outcome = ~glm(family = gaussian()),
model.propensity = ~glm(family = binomial())
)
pathsEffect(EIF_fit)
devtools::document()
devtools::build()
remove.packages("flexPaths")
devtools::document()
devtools::build()
library(flexPaths)
EIF_fit <- pathsInfo(data = singTreat, A = "treat", Y = "outcome1", cov_x = c("X1", "X2"),
M.list = list(M1 = "med1", M2 = c('med2_1', 'med2_2'), M3 = 'med3'),
estimation = "EIF",
model.outcome = list(~ lm()),
model.propensity = ~ glm(family = binomial())
)
data("singTreat")
data("multiTreat")
EIF_fit <- pathsInfo(data = singTreat, A = "treat", Y = "outcome1", cov_x = c("X1", "X2"),
M.list = list(M1 = "med1", M2 = c('med2_1', 'med2_2'), M3 = 'med3'),
estimation = "EIF",
model.outcome = list(~ lm()),
model.propensity = ~ glm(family = binomial())
)
EIF_fit
EIF_fit$Imodel.source
pathsEffect(EIF_fit)
flexPotential(EIF_fit,active = c(1,1,1,1,0))
?flexPotential(EIF_fit,active = c(1,1,1,1,0))
flexPotential(EIF_fit,active = c(1,1,1,0))
f1<-flexPotential(EIF_fit,active = c(1,1,1,0))
f1<-flexPotential(EIF_fit,active = c(1,1,0,0))
f1<-flexPotential(EIF_fit,active = c(1,1,1,0))
f2<-flexPotential(EIF_fit,active = c(1,1,0,0))
pathsEffect(EIF_fit,nboot = 10)
flexEffect(f1,f2,nboot = 10)
flexEffect(f1,f2,nboot = 10,m.cores = 4)
pathsEffect(EIF_fit,nboot = 10,m.cores = 4)
pp<-pathsEffect(EIF_fit,nboot = 10,m.cores = 4)
devtools::document()
devtools::build()
?flexPotential
freshr::freshr()
library(flexPaths)
?flexPotential
?flexPotential()
?flexEffect
freshr::freshr()
?flexPotential()
library(flexPaths)
?flexPotential()
?flexEffect
?pathsEffect
?mflexPotential
