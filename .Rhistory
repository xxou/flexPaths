pro.details<- map(Pmodel,extract_model_details)
pro.fit_names <- map(pro.details, ~ paste0("fl_", .x$fit_name))
pro.calls <- map(pro.details, "model_call")
pro.modelfits<- pmap(list(cum_mediators, pro.fit_names, pro.calls),
function(cum_mediators, pro.fit_names, pro.calls){
model_fun <- match.fun(pro.fit_names)
model<-model_fun(data, X = cum_mediators,Y = A, fl_call=pro.calls)
return(model)
})
# P(A=1|cov_X); P(A=1|M1,cov_X); P(A=1|M1,...,MK,X)
gA1_Mk_X.list <- map2(cum_mediators, pro.modelfits, ~ {predict(.y, newdata = data[,.x, drop=FALSE])})
# P(A=0|cov_X); P(A=0|M1,cov_X); P(A=0|M1,...,MK,X)
gA0_Mk_X.list <- map(gA1_Mk_X.list, ~ {1-.x})
}
#### 3. outcome model modelO.list ----------
# check only one
if(estimation !="IPW"){
Omodel <-  Omodel.lists[max(c(1,unique(M.index[M.index!=0])+1))]
out.details<-  map(Omodel,extract_model_details)
out.fit_names <- map(out.details, ~ paste0("fl_", .x$fit_name))
out.calls <- map(out.details, "model_call")
Imodel <- Imodel.lists[c(1, unique(M.index[M.index!=0])[-(K-1)]+1)]
iter.details<- map(Imodel,extract_model_details)
iter.fit_names <- map(iter.details, ~ paste0("fl_", .x$fit_name))
iter.calls <- map(iter.details, "model_call")
iter.calls <-map(iter.calls, ~ replace_family(.x))
fit_names <- c(iter.fit_names, out.fit_names)
mu.calls <- c(iter.calls, out.calls)
# Innermost function
mu.all <- matrix(NA,nc=K+1,nr=nrow(data)) # EE..E()|A,X)|..), ...., E(Y|mk,A,x), Y
mu.all[,K+1] <- data[,Y]
# iterative outcome model
for(i in K:1){
data$mu <- mu.all[,i+1]
model_fun <- match.fun(fit_names[[i]])
modelfit <- model_fun(data, X = c(A,cum_mediators[[i]]),Y = "mu", fl_call=mu.calls[[i]])
Ai_data <- if(active_s[i]==1){ A1_data }else{ A0_data }
mu.all[,i] <- predict(modelfit, Ai_data[,c(A,cum_mediators[[i]])])
}
}
#### 4. calculate phi() and Pn( ) ------
if(estimation == "EIF"){
# phi() is a value for each row of EIF formula
phi.all <- matrix(NA,nc=K+1,nr=nrow(data)) # calculation from muK to mu1
phi.all[,1] <- mu.all[,1]
for (i in K:1) {
if(active_s[i] == 1){
gA_X <- gA1_Mk_X.list[[1]]
ratio_index = -1
}else{
gA_X <- gA0_Mk_X.list[[1]]
ratio_index = 1
}
# Bayes density ratio
product <- 1 # Initialize the product
# Iterate through previous indices j < i
for (j in seq_len(i - 1)) {
if (active_s[i] != active_s[j]) {
product <- product *
( (gA1_Mk_X.list[[j+1]]/gA0_Mk_X.list[[j+1]])*(gA0_Mk_X.list[[j]] / gA1_Mk_X.list[[j]]) )^(ratio_index)
}
}
# sub EIF function for each row
phi.all[,i+1] = (I == active_s[i])/gA_X*product*(mu.all[,i+1]-mu.all[,i])
}
potential_data = rowSums(phi.all)
}
if(estimation == "G"){
potential_data = mu.all[,1]
}
if(estimation =="IPW"){
if(active_s[K] == 1){ gA_X <- gA1_Mk_X.list[[1]]; ratio_index = -1
}else{ gA_X <- gA0_Mk_X.list[[1]]; ratio_index = 1 }
# Bayes density ratio
product <- 1 # Initialize the product
# Iterate through previous indices j < i
for (j in seq_len(K - 1)) {
if (active_s[K] != active_s[j]) {
product <- product *
( (gA1_Mk_X.list[[j+1]]/gA0_Mk_X.list[[j+1]])*(gA0_Mk_X.list[[j]] / gA1_Mk_X.list[[j]]) )^(ratio_index)
}
}
potential_data = (I == active_s[K])/gA_X*product*data[,Y]
}
results = data.frame(active = paste0(as.character(active), collapse = ""),
value = mean(potential_data,na.rm=T),
SE = sqrt(var(potential_data,na.rm=T)/nrow(data))
)
output <- list(call = cl,
pathsFit =pathsFit,
active = active,
results = results,
potential_data = potential_data)
class(output) <- 'flexPotential'
return(output)
}
EIF_fit <- pathsFit(data = singTreat, A = "treat", Y = "outcome2", cov_x = c("X1", "X2"),
M.list = list(M1 = "med1", M2 = c('med2_1', 'med2_2'), M3 = 'med3'),
estimation = "EIF",
model.outcome = list(cov_x= ~ glm(formula =  outcome2~X1*X2+treat, family =binomial() ),
M1 =~ glm(formula =  outcome2~X1*X2+med1+treat, family =binomial() ),
M2 =~ glm(formula =  outcome2~X1*X2+med1+med2_1+med2_2+treat, family =binomial()),
M3 =~ glm(formula =  outcome2~X1*X2+med1+med2_1+med2_2+med3+treat, family =binomial())
),
model.propensity = ~ bart(verbose = FALSE, ndpost = 200)
)
potential_outcome1 <- flexPotential(pathsFit = EIF_fit, active = c(1, 0, 1, 1))
library(flexPaths)
walk(r_files, source)
data("singTreat")
data("multiTreat")
EIF_fit <- pathsFit(data = singTreat, A = "treat", Y = "outcome2", cov_x = c("X1", "X2"),
M.list = list(M1 = "med1", M2 = c('med2_1', 'med2_2'), M3 = 'med3'),
estimation = "EIF",
model.outcome = list(cov_x= ~ glm(formula =  outcome2~X1*X2+treat, family =binomial() ),
M1 =~ glm(formula =  outcome2~X1*X2+med1+treat, family =binomial() ),
M2 =~ glm(formula =  outcome2~X1*X2+med1+med2_1+med2_2+treat, family =binomial()),
M3 =~ glm(formula =  outcome2~X1*X2+med1+med2_1+med2_2+med3+treat, family =binomial())
),
model.propensity = ~ bart(verbose = FALSE, ndpost = 200)
)
effect_results1 <- pathsEffect(pathsFit = EIF_fit, decomposition = "refer0", scale = "risk", CI_level = 0.95)
rlang::last_trace()
rlang::last_trace(drop = FALSE)
library(flexPaths)
EIF_fit <- pathsFit(data = singTreat, A = "treat", Y = "outcome2", cov_x = c("X1", "X2"),
M.list = list(M1 = "med1", M2 = c('med2_1', 'med2_2'), M3 = 'med3'),
estimation = "EIF",
model.outcome = list(cov_x= ~ glm(formula =  outcome2~X1*X2+treat, family =binomial() ),
M1 =~ glm(formula =  outcome2~X1*X2+med1+treat, family =binomial() ),
M2 =~ glm(formula =  outcome2~X1*X2+med1+med2_1+med2_2+treat, family =binomial()),
M3 =~ glm(formula =  outcome2~X1*X2+med1+med2_1+med2_2+med3+treat, family =binomial())
),
model.propensity = ~ bart(verbose = FALSE, ndpost = 200)
)
data("singTreat")
EIF_fit <- pathsFit(data = singTreat, A = "treat", Y = "outcome2", cov_x = c("X1", "X2"),
M.list = list(M1 = "med1", M2 = c('med2_1', 'med2_2'), M3 = 'med3'),
estimation = "EIF",
model.outcome = list(cov_x= ~ glm(formula =  outcome2~X1*X2+treat, family =binomial() ),
M1 =~ glm(formula =  outcome2~X1*X2+med1+treat, family =binomial() ),
M2 =~ glm(formula =  outcome2~X1*X2+med1+med2_1+med2_2+treat, family =binomial()),
M3 =~ glm(formula =  outcome2~X1*X2+med1+med2_1+med2_2+med3+treat, family =binomial())
),
model.propensity = ~ bart(verbose = FALSE, ndpost = 200)
)
effect_results1 <- pathsEffect(pathsFit = EIF_fit, decomposition = "refer0", scale = "risk", CI_level = 0.95)
devtools::document()
devtools::build()
# Get a list of all R files in the folder
r_files <- list.files(path = "R", pattern = "\\.R$", full.names = TRUE)
walk(r_files, source)
EIF_fit <- pathsFit(data = singTreat, A = "treat", Y = "outcome2", cov_x = c("X1", "X2"),
M.list = list(M1 = "med1", M2 = c('med2_1', 'med2_2'), M3 = 'med3'),
estimation = "EIF",
model.outcome = list(cov_x= ~ glm(formula =  outcome2~X1*X2+treat, family =binomial() ),
M1 =~ glm(formula =  outcome2~X1*X2+med1+treat, family =binomial() ),
M2 =~ glm(formula =  outcome2~X1*X2+med1+med2_1+med2_2+treat, family =binomial()),
M3 =~ glm(formula =  outcome2~X1*X2+med1+med2_1+med2_2+med3+treat, family =binomial())
),
model.propensity = ~ bart(verbose = FALSE, ndpost = 200)
)
potential_outcome1 <- flexPotential(pathsFit = EIF_fit, active = c(1, 0, 1, 1))
potential_outcome1
library(dplyr)
?if_else
# Get a list of all R files in the folder
r_files <- list.files(path = "R", pattern = "\\.R$", full.names = TRUE)
walk(r_files, source)
library(usethis)
library(devtools)
library(roxygen2)
pacman::p_load(dbarts,purrr,SuperLearner, dplyr)
# Get a list of all R files in the folder
r_files <- list.files(path = "R", pattern = "\\.R$", full.names = TRUE)
walk(r_files, source)
data("singTreat")
data("multiTreat")
EIF_fit <- pathsFit(data = singTreat, A = "treat", Y = "outcome2", cov_x = c("X1", "X2"),
M.list = list(M1 = "med1", M2 = c('med2_1', 'med2_2'), M3 = 'med3'),
estimation = "EIF",
model.outcome = list(cov_x= ~ glm(formula =  outcome2~X1*X2+treat, family =binomial() ),
M1 =~ glm(formula =  outcome2~X1*X2+med1+treat, family =binomial() ),
M2 =~ glm(formula =  outcome2~X1*X2+med1+med2_1+med2_2+treat, family =binomial()),
M3 =~ glm(formula =  outcome2~X1*X2+med1+med2_1+med2_2+med3+treat, family =binomial())
),
model.propensity = ~ bart(verbose = FALSE, ndpost = 200)
)
effect_results2 <- pathsEffect(pathsFit = EIF_fit, decomposition = "refer0", scale = "diff", CI_level = 0.95, nboot = 5, m.cores = 6)
rlang::last_trace()
effect_results2 <- pathsEffect(pathsFit = EIF_fit, decomposition = "refer0", scale = "diff", CI_level = 0.95, nboot = 5, m.cores = 6)
effect_results1 <- pathsEffect(pathsFit = EIF_fit, decomposition = "refer0", scale = "risk", CI_level = 0.95)
effect_results1
effect_results3 <- pathsEffect( pathsFit = EIF_fit, decomposition = "sequential", scale = "diff", CI_level = 0.95, nboot = , m.cores = 6)
effect_results3 <- pathsEffect( pathsFit = EIF_fit, decomposition = "sequential", scale = "diff", CI_level = 0.95, nboot =5 , m.cores = 6)
walk(r_files, source)
effect_results2 <- pathsEffect(pathsFit = EIF_fit, decomposition = "refer0", scale = "diff", CI_level = 0.95, nboot = 5, m.cores = 6)
# Get a list of all R files in the folder
r_files <- list.files(path = "R", pattern = "\\.R$", full.names = TRUE)
walk(r_files, source)
effect_results1 <- pathsEffect(pathsFit = EIF_fit, decomposition = "refer0", scale = "risk", CI_level = 0.95)
effect_results2 <- pathsEffect(pathsFit = EIF_fit, decomposition = "refer0", scale = "diff", CI_level = 0.95, nboot = 5, m.cores = 6)
effect_results2
effect_results2 <- pathsEffect(pathsFit = EIF_fit, decomposition = "refer0", scale = "risk", CI_level = 0.95, nboot = 5, m.cores = 6)
effect_results2
# Get a list of all R files in the folder
r_files <- list.files(path = "R", pattern = "\\.R$", full.names = TRUE)
walk(r_files, source)
potential_outcome1 <- flexPotential(pathsFit = EIF_fit, active = c(1, 0, 1, 1))
potential_outcome0 <- flexPotential(pathsFit = EIF_fit, active = c(0, 0, 0, 0))
potential_outcome2<- flexPotential(pathsFit = EIF_fit, active = c(1, 0, 0, 1))
flex_results1 <- flexEffect(p1 = list(potential_outcome1, potential_outcome2),
p0 = potential_outcome0, scale = "diff", CI_level = 0.95,nboot = 5)
flex_results1
flex_results2 <- flexEffect(p1 = list(potential_outcome1, potential_outcome2),
p0 = potential_outcome0, scale = "risk", CI_level = 0.95,nboot = 3)
flex_results2
library(flexPaths)
data("singTreat")
EIF_fit <- pathsFit(data = singTreat, A = "treat", Y = "outcome2", cov_x = c("X1", "X2"),
M.list = list(M1 = "med1", M2 = c('med2_1', 'med2_2'), M3 = 'med3'),
estimation = "EIF",
model.outcome = list(cov_x= ~ glm(formula =  outcome2~X1*X2+treat, family =binomial() ),
M1 =~ glm(formula =  outcome2~X1*X2+med1+treat, family =binomial() ),
M2 =~ glm(formula =  outcome2~X1*X2+med1+med2_1+med2_2+treat, family =binomial()),
M3 =~ glm(formula =  outcome2~X1*X2+med1+med2_1+med2_2+med3+treat, family =binomial())
),
model.propensity = ~ bart(verbose = FALSE, ndpost = 200)
)
effect_results1 <- pathsEffect(pathsFit = EIF_fit, decomposition = "refer0", scale = "risk", CI_level = 0.95)
effect_results1
effect_results1 <- pathsEffect(pathsFit = EIF_fit, decomposition = "refer0", scale = "diff", CI_level = 0.95)
effect_results1
effect_results3 <- pathsEffect( pathsFit = EIF_fit, decomposition = "sequential", scale = "diff", CI_level = 0.95, nboot =5 , m.cores = 6)
effect_results3
effect_results2 <- pathsEffect(pathsFit = EIF_fit, decomposition = "refer0", scale = "risk", CI_level = 0.95, nboot = 5, m.cores = 6)
effect_results2
CI_level=0.95
(1-CI_level)
(1-CI_level)/2
qnorm((1-CI_level)/2)
qnorm((1-CI_level)/2)
library(devtools)
install_github("AshTai/MedMR")
library(MedMR)
data("HCCexample")
ff <- MedMR(data=HCCexample,exposure="a",mediators=c("m1","m2"),outcome="y",
confounder=c("gender","age","smoke","alcohol"),
m_type=c("d","d"),y_type = "discrete",
method = "Robust",
scale = "difference",
boot = T,
boot_ratio = 0.8,
boot_rep = 20,
seed_num = 123,
double_mont = 1e5,
single_mont = 2e5,
b_rep = TRUE)
ff
ff <- MedMR(data=HCCexample,exposure="a",mediators=c("m1","m2"),outcome="y",
confounder=c("gender","age","smoke","alcohol"),
m_type=c("d","d"),y_type = "discrete",
method = "Robust",
scale = "ratio",
boot = T,
boot_ratio = 0.8,
boot_rep = 20,
seed_num = 123,
double_mont = 1e5,
single_mont = 2e5,
b_rep = TRUE)
ff
devtools::check()
![](pic/DAG_oneT.jpg){width="350"}
sessionInfo()
pacman::p_load(dbarts,purrr,SuperLearner, dplyr)
data("singTreat")
data("multiTreat")
# Get a list of all R files in the folder
r_files <- list.files(path = "R", pattern = "\\.R$", full.names = TRUE)
walk(r_files, source)
library(knitr)
opts_chunk$set(warning = FALSE, message = FALSE, eval=F)
1+1
data("singTreat")
data("singTreat")
head(singTreat)
EIF_fit <- pathsFit(data = singTreat, A = "treat", Y = "outcome1", cov_x = c("X1", "X2"),
M.list = list(M1 = "med1", M2 = c('med2_1', 'med2_2'), M3 = 'med3'),
estimation = "EIF",
model.outcome = list(~ glm(family = gaussian())),
model.propensity = ~ bart(verbose = FALSE, ndpost = 200)
)
EIF_fit <- pathsFit(data = singTreat, A = "treat", Y = "outcome1", cov_x = c("X1", "X2"),
M.list = list(M1 = "med1", M2 = c('med2_1', 'med2_2'), M3 = 'med3'),
estimation = "EIF",
model.outcome = ~ glm(family = gaussian()),
model.propensity = ~ glm(family = binomial())
)
effect_results1 <- pathsEffect(pathsFit = EIF_fit, decomposition = "refer0", scale = "diff", CI_level = 0.95)
effect_results2 <- pathsEffect(pathsFit = EIF_fit, decomposition = "refer0", scale = "diff", CI_level = 0.95, nboot = 100, m.cores = 6)
EIF_fit <- pathsFit(data = singTreat, A = "treat", Y = "outcome1", cov_x = c("X1", "X2"),
M.list = list(M1 = "med1", M2 = c('med2_1', 'med2_2'), M3 = 'med3'),
estimation = "EIF",
model.outcome = ~ glm(family = gaussian()),
model.propensity = ~ glm(family = binomial())
)
effect_results1 <- pathsEffect(pathsFit = EIF_fit, decomposition = "refer0", scale = "diff", CI_level = 0.95)
effect_results2 <- pathsEffect(pathsFit = EIF_fit, decomposition = "refer0", scale = "diff", CI_level = 0.95, nboot = 100, m.cores = 6)
effect_results3 <- pathsEffect( pathsFit = EIF_fit, decomposition = "sequential", scale = "diff", CI_level = 0.95)
results_refer0 <- pathsEffect(pathsFit = EIF_fit, decomposition = "refer0", scale = "diff", CI_level = 0.95)
results_refer0 <- pathsEffect(pathsFit = EIF_fit, decomposition = "refer0", scale = "diff", CI_level = 0.95)
results_refer0
results_refer0 <- pathsEffect(pathsFit = EIF_fit, decomposition = "refer0", scale = "diff", CI_level = 0.95)
results_refer0
results_seq <- pathsEffect(pathsFit = EIF_fit, decomposition = "refer0", scale = "diff", CI_level = 0.95)
results_seq
results_refer0 <- pathsEffect(pathsFit = EIF_fit, decomposition = "refer0", scale = "diff", CI_level = 0.95)
results_refer0
results_seq <- pathsEffect(pathsFit = EIF_fit, decomposition = "refer0", scale = "diff", CI_level = 0.95)
results_seq
results_refer0 <- pathsEffect(pathsFit = EIF_fit, decomposition = "refer0", scale = "diff", CI_level = 0.95)
results_refer0
results_seq <- pathsEffect(pathsFit = EIF_fit, decomposition = "sequential", scale = "diff", CI_level = 0.95)
results_seq
results_refer0 <- pathsEffect(pathsFit = EIF_fit, decomposition = "refer0", scale = "diff", CI_level = 0.95)
results_refer0
results_seq <- pathsEffect(pathsFit = EIF_fit, decomposition = "sequential", scale = "diff", CI_level = 0.95)
results_seq
results_boot <- pathsEffect( pathsFit = EIF_fit, decomposition = "sequential", scale = "diff", CI_level = 0.95, nboot = 10, m.cores = NULL)
results_boot <- pathsEffect( pathsFit = EIF_fit, decomposition = "sequential", scale = "diff", CI_level = 0.95, nboot = 10, m.cores = 3)
results_boot
flex_results1 <- flexEffect(p1 = potential_outcome1,
p0 = potential_outcome0, scale = "diff", CI_level = 0.95,nboot = 10, m.cores = 3)
potential_outcome0 <- flexPotential(pathsFit = EIF_fit, active = c(0, 0, 0, 0))
potential_outcome1 <- flexPotential(pathsFit = EIF_fit, active = c(1, 0, 1, 1))
potential_outcome2<- flexPotential(pathsFit = EIF_fit, active = c(1, 0, 0, 1))
flex_results1 <- flexEffect(p1 = potential_outcome1,
p0 = potential_outcome0, scale = "diff", CI_level = 0.95,nboot = 10, m.cores = 3)
flex_results1
flex_results <- flexEffect(p1 = list(potential_outcome1, potential_outcome2),
p0 = potential_outcome0, scale = "diff", CI_level = 0.95,nboot = 5)
flex_results
potential_outcome0 <- flexPotential(pathsFit = EIF_fit, active = c(0, 0, 0, 0))
potential_outcome1 <- flexPotential(pathsFit = EIF_fit, active = c(1, 0, 1, 1))
potential_outcome2 <- flexPotential(pathsFit = EIF_fit, active = c(1, 0, 0, 1))
potential_outcome3 <- flexPotential(pathsFit = EIF_fit, active = c(1, 1, 0, 0))
potential_outcome0 <- flexPotential(pathsFit = EIF_fit, active = c(0, 0, 0, 0))
potential_outcome1 <- flexPotential(pathsFit = EIF_fit, active = c(1, 0, 1, 1))
potential_outcome2 <- flexPotential(pathsFit = EIF_fit, active = c(1, 0, 0, 1))
potential_outcome3 <- flexPotential(pathsFit = EIF_fit, active = c(1, 0, 0, 0))
flex_results <- flexEffect(p1 = list(potential_outcome1),
p0 = list(potential_outcome2,potential_outcome3), scale = "diff", CI_level = 0.95,nboot = 5)
flex_results
data("multiTreat")
head(multiTreat)
#' @export
print.pathsFit <- function(x){
cat("\n")
cat("Paths Parameters")
cat("\n\n")
cat(x$fit_type,x$A,"; outcome:", x$Y,"; covariates:", x$cov_x)
cat("\n\n")
cat("mediators:")
cat("\n\n")
print(x$M.list)
}
walk(r_files, source)
# Get a list of all R files in the folder
r_files <- list.files(path = "R", pattern = "\\.R$", full.names = TRUE)
walk(r_files, source)
pacman::p_load(dbarts,purrr,SuperLearner, dplyr)
data("singTreat")
data("multiTreat")
# Get a list of all R files in the folder
r_files <- list.files(path = "R", pattern = "\\.R$", full.names = TRUE)
walk(r_files, source)
EIF_fit <- pathsFit(data = singTreat, A = "treat", Y = "outcome1", cov_x = c("X1", "X2"),
M.list = list(M1 = "med1", M2 = c('med2_1', 'med2_2'), M3 = 'med3'),
estimation = "EIF",
model.outcome = list(~ glm(family = gaussian())),
model.propensity = ~ bart(verbose = FALSE, ndpost = 200)
)
EIF_fit
#' @export
print.pathsFit <- function(x){
cat("\n")
cat("Paths Parameters")
cat("\n\n")
cat(x$fit_type,":",x$A,"; outcome:", x$Y,"; covariates:", x$cov_x)
cat("\n\n")
cat("mediators:")
cat("\n\n")
print(x$M.list)
}
EIF_fit
# Get a list of all R files in the folder
r_files <- list.files(path = "R", pattern = "\\.R$", full.names = TRUE)
walk(r_files, source)
EIF_fit <- pathsFit(data = singTreat, A = "treat", Y = "outcome1", cov_x = c("X1", "X2"),
M.list = list(M1 = "med1", M2 = c('med2_1', 'med2_2'), M3 = 'med3'),
estimation = "EIF",
model.outcome = list(~ glm(family = gaussian())),
model.propensity = ~ bart(verbose = FALSE, ndpost = 200)
)
EIF_fit
EIF_fit$type
flexEffect(p1 = mp1, p0 = mp2, scale = "diff", CI_level = 0.95, nboot =10 , m.cores = 6)
mp1<-mflexPotential(active = list(a1=c(0,1,0,0,1,0,0),
a2=c(1,0,1,1,1,0,0),
a3=c(NA,NA,NA,1,0,0,0)),mfit)
mfit<- pathsFit(data = multiTreat,
Y = "Y",
A = c("t1","t2","t3"),
cov_x = "X",
M.list = list(
M1 = 'm1',
M2 = 'm2',
M3 = 'm3',
M4 = 'm4',
M5 = 'm5',
M6 = 'm6'
),
estimation = "EIF",
model.propensity =list( ~  glm(family = binomial())),
model.outcome = list( ~SuperLearner(SL.library = "SL.mean",family = gaussian())),
model.iter  = list(~glm(family = gaussian()))
)
mp1<-mflexPotential(active = list(a1=c(0,1,0,0,1,0,0),
a2=c(1,0,1,1,1,0,0),
a3=c(NA,NA,NA,1,0,0,0)),mfit)
mp2<-mflexPotential(active = list(a1=c(0,0,0,0,1,0,0),
a2=c(0,0,0,1,1,0,0),
a3=c(NA,NA,NA,1,0,0,0)),mfit)
flexEffect(p1 = mp1, p0 = mp2, scale = "diff", CI_level = 0.95, nboot =10 , m.cores = 6)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(survival,tidyverse)
type = c(rep('astrocytoma',10),rep('glioblastoma',10))
time = c(6,6,13,21,30,31,37,38,47,49,10,10,13,25,33,36,47,49,50,50)
status = c(1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0,0)
Glioma_dt<-data.frame(type,time,status)
astrocytoma_dt<- Glioma_dt %>% filter(type=='astrocytoma')
glioblastoma_dt<- Glioma_dt %>% filter(type=='glioblastoma')
Glioma.fit <- survfit(Surv(time,status) ~ type,
data=Glioma_dt, conf.type="log-log")
plot(Glioma.fit,
xlab = "Survival time after recurrent Glioma (weeks)",
ylab = "Survival probability",
main = "survival after recurrent astrocytoma")
legend("bottomleft", legend=c("No Atrial Fibrillation","Atrial Fibrillation"), lty=c(1,2))
Glioma.fit <- survfit(Surv(time,status) ~ type,
data=Glioma_dt, conf.type="log-log")
plot(Glioma.fit,lty=c(1,2),
xlab = "Survival time after recurrent Glioma (weeks)",
ylab = "Survival probability",
main = "survival after recurrent astrocytoma")
legend("bottomleft", legend=c("No Atrial Fibrillation","Atrial Fibrillation"), lty=c(1,2))
Glioma.fit <- survfit(Surv(time,status) ~ type,
data=Glioma_dt, conf.type="log-log")
Glioma.fit
plot(Glioma.fit,lty=c(1,2),
xlab = "Survival time after recurrent Glioma (weeks)",
ylab = "Survival probability",
main = "survival after recurrent astrocytoma")
legend("bottomleft", legend=c("No Atrial Fibrillation","Atrial Fibrillation"), lty=c(1,2))
Glioma.fit <- survfit(Surv(time,status) ~ type,
data=Glioma_dt, conf.type="log-log")
Glioma.fit
plot(Glioma.fit,lty=c(1,2),
xlab = "Survival time after recurrent Glioma (weeks)",
ylab = "Survival probability",
main = "survival after recurrent astrocytoma")
legend("bottomleft", legend=c("astrocytoma","Atrial glioblastoma"), lty=c(1,2))
Glioma.fit <- survfit(Surv(time,status) ~ type,
data=Glioma_dt, conf.type="log-log")
Glioma.fit
plot(Glioma.fit,lty=c(1,2),
xlab = "Survival time after recurrent Glioma (weeks)",
ylab = "Survival probability",
main = "survival after recurrent astrocytoma")
legend("bottomleft", legend=c("astrocytoma","glioblastoma"), lty=c(1,2))
type = c(rep('astrocytoma',10),rep('glioblastoma',10))
time = c(6,6,13,21,30,31,37,38,47,49,10,10,13,25,33,36,47,49,50,50)
status = c(1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0,0)
Glioma_dt<-data.frame(type,time,status) %>%
mutate(type = factor(type, level=c('astrocytoma','glioblastoma')))
astrocytoma_dt<- Glioma_dt %>% filter(type=='astrocytoma')
glioblastoma_dt<- Glioma_dt %>% filter(type=='glioblastoma')
Glioma.fit <- survfit(Surv(time,status) ~ type,
data=Glioma_dt, conf.type="log-log")
Glioma.fit
plot(Glioma.fit,lty=c(1,2),
xlab = "Survival time after recurrent Glioma (weeks)",
ylab = "Survival probability",
main = "survival after recurrent Glioma")
legend("bottomleft", legend=c("astrocytoma","glioblastoma"), lty=c(1,2))
Glioma.fit <- survfit(Surv(time,status) ~ type,
data=Glioma_dt, conf.type="log-log")
Glioma.fit
plot(Glioma.fit,lty=c(1,2),
xlab = "Survival time after recurrent Glioma (weeks)",
ylab = "Survival probability",
main = "Survival after recurrent Glioma")
legend("bottomleft", legend=c("astrocytoma","glioblastoma"), lty=c(1,2))
astrocytoma.fit <- survfit(Surv(time,status) ~ 1,
data=astrocytoma_dt, conf.type="log-log")
astrocytoma.fit
glioblastoma.fit <- survfit(Surv(time,status) ~ 1,
data=glioblastoma_dt, conf.type="log-log")
glioblastoma.fit
astrocytoma.log_log
